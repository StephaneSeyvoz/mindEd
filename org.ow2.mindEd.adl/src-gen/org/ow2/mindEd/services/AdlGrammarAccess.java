/*
 * generated by Xtext
 */
package org.ow2.mindEd.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class AdlGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class AdlFileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AdlFile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportDefinitionParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Assignment cAnnotationsListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsListAnnotationsListParserRuleCall_1_0 = (RuleCall)cAnnotationsListAssignment_1.eContents().get(0);
		private final Assignment cArchitectureDefinitionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArchitectureDefinitionArchitectureDefinitionParserRuleCall_2_0 = (RuleCall)cArchitectureDefinitionAssignment_2.eContents().get(0);
		
		//AdlFile:
		//	imports+=ImportDefinition* / *
		//	 * Any ArchitectureDefinition can be annotated
		//	 * The following line used to be defined in each of the kinds of ArchitectureDefinition
		//	 * (allowing to use the getAnnotationsList method of the according feature in EMF on each type)
		//	 * but led to ambiguities in the grammar, leading to breaking Xtext's model and autocompletion,
		//	 * mostly on provided and required interfaces.
		//	 * / annotationsList=AnnotationsList? architectureDefinition=ArchitectureDefinition;
		@Override public ParserRule getRule() { return rule; }

		//imports+=ImportDefinition* / *
		//	 * Any ArchitectureDefinition can be annotated
		//	 * The following line used to be defined in each of the kinds of ArchitectureDefinition
		//	 * (allowing to use the getAnnotationsList method of the according feature in EMF on each type)
		//	 * but led to ambiguities in the grammar, leading to breaking Xtext's model and autocompletion,
		//	 * mostly on provided and required interfaces.
		//	 * / annotationsList=AnnotationsList? architectureDefinition=ArchitectureDefinition
		public Group getGroup() { return cGroup; }

		//imports+=ImportDefinition*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }

		//ImportDefinition
		public RuleCall getImportsImportDefinitionParserRuleCall_0_0() { return cImportsImportDefinitionParserRuleCall_0_0; }

		//annotationsList=AnnotationsList?
		public Assignment getAnnotationsListAssignment_1() { return cAnnotationsListAssignment_1; }

		//AnnotationsList
		public RuleCall getAnnotationsListAnnotationsListParserRuleCall_1_0() { return cAnnotationsListAnnotationsListParserRuleCall_1_0; }

		//architectureDefinition=ArchitectureDefinition
		public Assignment getArchitectureDefinitionAssignment_2() { return cArchitectureDefinitionAssignment_2; }

		//ArchitectureDefinition
		public RuleCall getArchitectureDefinitionArchitectureDefinitionParserRuleCall_2_0() { return cArchitectureDefinitionArchitectureDefinitionParserRuleCall_2_0; }
	}

	public class ArchitectureDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArchitectureDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCompositeDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPrimitiveDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTypeDefinitionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		/// *
		// * SSZ Note: Mind package scoping is handled thanks to the
		// * org.ow2.mindEd.adl.textual.scoping.FractalImportedNamespaceAwareLocalScopeProvider
		// * to be able to manage implicit declaration during the component declaration.
		// * / ArchitectureDefinition:
		//	CompositeDefinition | PrimitiveDefinition | TypeDefinition;
		@Override public ParserRule getRule() { return rule; }

		//CompositeDefinition | PrimitiveDefinition | TypeDefinition
		public Alternatives getAlternatives() { return cAlternatives; }

		//CompositeDefinition
		public RuleCall getCompositeDefinitionParserRuleCall_0() { return cCompositeDefinitionParserRuleCall_0; }

		//PrimitiveDefinition
		public RuleCall getPrimitiveDefinitionParserRuleCall_1() { return cPrimitiveDefinitionParserRuleCall_1; }

		//TypeDefinition
		public RuleCall getTypeDefinitionParserRuleCall_2() { return cTypeDefinitionParserRuleCall_2; }
	}

	public class ImportDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImportDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsListAnnotationsListParserRuleCall_0_0 = (RuleCall)cAnnotationsListAssignment_0.eContents().get(0);
		private final Keyword cImportKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cImportedNamespaceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_2_0 = (RuleCall)cImportedNamespaceAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ImportDefinition:
		//	annotationsList=AnnotationsList? "import" importedNamespace=QualifiedNameWithWildcard ";";
		@Override public ParserRule getRule() { return rule; }

		//annotationsList=AnnotationsList? "import" importedNamespace=QualifiedNameWithWildcard ";"
		public Group getGroup() { return cGroup; }

		//annotationsList=AnnotationsList?
		public Assignment getAnnotationsListAssignment_0() { return cAnnotationsListAssignment_0; }

		//AnnotationsList
		public RuleCall getAnnotationsListAnnotationsListParserRuleCall_0_0() { return cAnnotationsListAnnotationsListParserRuleCall_0_0; }

		//"import"
		public Keyword getImportKeyword_1() { return cImportKeyword_1; }

		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_2() { return cImportedNamespaceAssignment_2; }

		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_2_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildcard:
		//	QualifiedName ".*"?;
		@Override public ParserRule getRule() { return rule; }

		//QualifiedName ".*"?
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//".*"?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}

	public class CompositeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompositeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCompositeDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCompositeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameQualifiedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLessThanSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Assignment cTemplateSpecifiersAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cTemplateSpecifiersTemplateSpecifierParserRuleCall_3_1_0_0 = (RuleCall)cTemplateSpecifiersAssignment_3_1_0.eContents().get(0);
		private final Group cGroup_3_1_1 = (Group)cGroup_3_1.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_1_0 = (Keyword)cGroup_3_1_1.eContents().get(0);
		private final Assignment cTemplateSpecifiersAssignment_3_1_1_1 = (Assignment)cGroup_3_1_1.eContents().get(1);
		private final RuleCall cTemplateSpecifiersTemplateSpecifierParserRuleCall_3_1_1_1_0 = (RuleCall)cTemplateSpecifiersAssignment_3_1_1_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cCompositeFormalArgumentsListAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCompositeFormalArgumentsListFormalArgumentsListParserRuleCall_4_0 = (RuleCall)cCompositeFormalArgumentsListAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cExtendsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cSuperTypesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cSuperTypesCompositeSuperTypeParserRuleCall_5_1_0 = (RuleCall)cSuperTypesAssignment_5_1.eContents().get(0);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Keyword cCommaKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Assignment cSuperTypesAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final RuleCall cSuperTypesCompositeSuperTypeParserRuleCall_5_2_1_0 = (RuleCall)cSuperTypesAssignment_5_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cElementsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final Alternatives cElementsAlternatives_7_0 = (Alternatives)cElementsAssignment_7.eContents().get(0);
		private final RuleCall cElementsProvidedInterfaceDefinitionParserRuleCall_7_0_0 = (RuleCall)cElementsAlternatives_7_0.eContents().get(0);
		private final RuleCall cElementsRequiredInterfaceDefinitionParserRuleCall_7_0_1 = (RuleCall)cElementsAlternatives_7_0.eContents().get(1);
		private final RuleCall cElementsSubComponentDefinitionParserRuleCall_7_0_2 = (RuleCall)cElementsAlternatives_7_0.eContents().get(2);
		private final RuleCall cElementsBindingDefinitionParserRuleCall_7_0_3 = (RuleCall)cElementsAlternatives_7_0.eContents().get(3);
		private final RuleCall cElementsOutputFlowInterfaceDefinitionParserRuleCall_7_0_4 = (RuleCall)cElementsAlternatives_7_0.eContents().get(4);
		private final RuleCall cElementsInputFlowInterfaceDefinitionParserRuleCall_7_0_5 = (RuleCall)cElementsAlternatives_7_0.eContents().get(5);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//CompositeDefinition:
		//	{CompositeDefinition} "composite" name=QualifiedName? // support anonymous definitions
		//	("<" (templateSpecifiers+=TemplateSpecifier ("," templateSpecifiers+=TemplateSpecifier)*) ">")? // <ID conformsto TypeDefinition, ID2 conformsto TypeDef2, ...>
		//	compositeFormalArgumentsList=FormalArgumentsList? // (arg1, arg2, ...)
		//	("extends" superTypes+=CompositeSuperType ("," superTypes+=CompositeSuperType)*)? "{"
		//	elements+=(ProvidedInterfaceDefinition | RequiredInterfaceDefinition | SubComponentDefinition | BindingDefinition |
		//	OutputFlowInterfaceDefinition | InputFlowInterfaceDefinition)* "}";
		@Override public ParserRule getRule() { return rule; }

		//{CompositeDefinition} "composite" name=QualifiedName? // support anonymous definitions
		//("<" (templateSpecifiers+=TemplateSpecifier ("," templateSpecifiers+=TemplateSpecifier)*) ">")? // <ID conformsto TypeDefinition, ID2 conformsto TypeDef2, ...>
		//compositeFormalArgumentsList=FormalArgumentsList? // (arg1, arg2, ...)
		//("extends" superTypes+=CompositeSuperType ("," superTypes+=CompositeSuperType)*)? "{"
		//elements+=(ProvidedInterfaceDefinition | RequiredInterfaceDefinition | SubComponentDefinition | BindingDefinition |
		//OutputFlowInterfaceDefinition | InputFlowInterfaceDefinition)* "}"
		public Group getGroup() { return cGroup; }

		//{CompositeDefinition}
		public Action getCompositeDefinitionAction_0() { return cCompositeDefinitionAction_0; }

		//"composite"
		public Keyword getCompositeKeyword_1() { return cCompositeKeyword_1; }

		//name=QualifiedName?
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_2_0() { return cNameQualifiedNameParserRuleCall_2_0; }

		//("<" (templateSpecifiers+=TemplateSpecifier ("," templateSpecifiers+=TemplateSpecifier)*) ">")?
		public Group getGroup_3() { return cGroup_3; }

		//"<"
		public Keyword getLessThanSignKeyword_3_0() { return cLessThanSignKeyword_3_0; }

		//templateSpecifiers+=TemplateSpecifier ("," templateSpecifiers+=TemplateSpecifier)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//templateSpecifiers+=TemplateSpecifier
		public Assignment getTemplateSpecifiersAssignment_3_1_0() { return cTemplateSpecifiersAssignment_3_1_0; }

		//TemplateSpecifier
		public RuleCall getTemplateSpecifiersTemplateSpecifierParserRuleCall_3_1_0_0() { return cTemplateSpecifiersTemplateSpecifierParserRuleCall_3_1_0_0; }

		//("," templateSpecifiers+=TemplateSpecifier)*
		public Group getGroup_3_1_1() { return cGroup_3_1_1; }

		//","
		public Keyword getCommaKeyword_3_1_1_0() { return cCommaKeyword_3_1_1_0; }

		//templateSpecifiers+=TemplateSpecifier
		public Assignment getTemplateSpecifiersAssignment_3_1_1_1() { return cTemplateSpecifiersAssignment_3_1_1_1; }

		//TemplateSpecifier
		public RuleCall getTemplateSpecifiersTemplateSpecifierParserRuleCall_3_1_1_1_0() { return cTemplateSpecifiersTemplateSpecifierParserRuleCall_3_1_1_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_3_2() { return cGreaterThanSignKeyword_3_2; }

		//compositeFormalArgumentsList=FormalArgumentsList?
		public Assignment getCompositeFormalArgumentsListAssignment_4() { return cCompositeFormalArgumentsListAssignment_4; }

		//FormalArgumentsList
		public RuleCall getCompositeFormalArgumentsListFormalArgumentsListParserRuleCall_4_0() { return cCompositeFormalArgumentsListFormalArgumentsListParserRuleCall_4_0; }

		//("extends" superTypes+=CompositeSuperType ("," superTypes+=CompositeSuperType)*)?
		public Group getGroup_5() { return cGroup_5; }

		//"extends"
		public Keyword getExtendsKeyword_5_0() { return cExtendsKeyword_5_0; }

		//superTypes+=CompositeSuperType
		public Assignment getSuperTypesAssignment_5_1() { return cSuperTypesAssignment_5_1; }

		//CompositeSuperType
		public RuleCall getSuperTypesCompositeSuperTypeParserRuleCall_5_1_0() { return cSuperTypesCompositeSuperTypeParserRuleCall_5_1_0; }

		//("," superTypes+=CompositeSuperType)*
		public Group getGroup_5_2() { return cGroup_5_2; }

		//","
		public Keyword getCommaKeyword_5_2_0() { return cCommaKeyword_5_2_0; }

		//superTypes+=CompositeSuperType
		public Assignment getSuperTypesAssignment_5_2_1() { return cSuperTypesAssignment_5_2_1; }

		//CompositeSuperType
		public RuleCall getSuperTypesCompositeSuperTypeParserRuleCall_5_2_1_0() { return cSuperTypesCompositeSuperTypeParserRuleCall_5_2_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }

		//elements+=(ProvidedInterfaceDefinition | RequiredInterfaceDefinition | SubComponentDefinition | BindingDefinition |
		//OutputFlowInterfaceDefinition | InputFlowInterfaceDefinition)*
		public Assignment getElementsAssignment_7() { return cElementsAssignment_7; }

		//ProvidedInterfaceDefinition | RequiredInterfaceDefinition | SubComponentDefinition | BindingDefinition |
		//OutputFlowInterfaceDefinition | InputFlowInterfaceDefinition
		public Alternatives getElementsAlternatives_7_0() { return cElementsAlternatives_7_0; }

		//ProvidedInterfaceDefinition
		public RuleCall getElementsProvidedInterfaceDefinitionParserRuleCall_7_0_0() { return cElementsProvidedInterfaceDefinitionParserRuleCall_7_0_0; }

		//RequiredInterfaceDefinition
		public RuleCall getElementsRequiredInterfaceDefinitionParserRuleCall_7_0_1() { return cElementsRequiredInterfaceDefinitionParserRuleCall_7_0_1; }

		//SubComponentDefinition
		public RuleCall getElementsSubComponentDefinitionParserRuleCall_7_0_2() { return cElementsSubComponentDefinitionParserRuleCall_7_0_2; }

		//BindingDefinition
		public RuleCall getElementsBindingDefinitionParserRuleCall_7_0_3() { return cElementsBindingDefinitionParserRuleCall_7_0_3; }

		//OutputFlowInterfaceDefinition
		public RuleCall getElementsOutputFlowInterfaceDefinitionParserRuleCall_7_0_4() { return cElementsOutputFlowInterfaceDefinitionParserRuleCall_7_0_4; }

		//InputFlowInterfaceDefinition
		public RuleCall getElementsInputFlowInterfaceDefinitionParserRuleCall_7_0_5() { return cElementsInputFlowInterfaceDefinitionParserRuleCall_7_0_5; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class PrimitiveDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimitiveDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPrimitiveDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAbstractAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cAbstractAbstractKeyword_1_0 = (Keyword)cAbstractAssignment_1.eContents().get(0);
		private final Keyword cPrimitiveKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameQualifiedNameParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cCompositeFormalArgumentsListAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCompositeFormalArgumentsListFormalArgumentsListParserRuleCall_4_0 = (RuleCall)cCompositeFormalArgumentsListAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cExtendsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cSuperTypesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cSuperTypesPrimitiveSuperTypeParserRuleCall_5_1_0 = (RuleCall)cSuperTypesAssignment_5_1.eContents().get(0);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Keyword cCommaKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Assignment cSuperTypesAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final RuleCall cSuperTypesPrimitiveSuperTypeParserRuleCall_5_2_1_0 = (RuleCall)cSuperTypesAssignment_5_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cElementsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final Alternatives cElementsAlternatives_7_0 = (Alternatives)cElementsAssignment_7.eContents().get(0);
		private final RuleCall cElementsProvidedInterfaceDefinitionParserRuleCall_7_0_0 = (RuleCall)cElementsAlternatives_7_0.eContents().get(0);
		private final RuleCall cElementsRequiredInterfaceDefinitionParserRuleCall_7_0_1 = (RuleCall)cElementsAlternatives_7_0.eContents().get(1);
		private final RuleCall cElementsImplementationDefinitionParserRuleCall_7_0_2 = (RuleCall)cElementsAlternatives_7_0.eContents().get(2);
		private final RuleCall cElementsAttributeDefinitionParserRuleCall_7_0_3 = (RuleCall)cElementsAlternatives_7_0.eContents().get(3);
		private final RuleCall cElementsDataDefinitionParserRuleCall_7_0_4 = (RuleCall)cElementsAlternatives_7_0.eContents().get(4);
		private final RuleCall cElementsOutputFlowInterfaceDefinitionParserRuleCall_7_0_5 = (RuleCall)cElementsAlternatives_7_0.eContents().get(5);
		private final RuleCall cElementsInputFlowInterfaceDefinitionParserRuleCall_7_0_6 = (RuleCall)cElementsAlternatives_7_0.eContents().get(6);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//PrimitiveDefinition:
		//	{PrimitiveDefinition} abstract?="abstract"? "primitive" name=QualifiedName? // support anonymous definitions
		//	compositeFormalArgumentsList=FormalArgumentsList? ("extends" superTypes+=PrimitiveSuperType (","
		//	superTypes+=PrimitiveSuperType)*)? "{" elements+=(ProvidedInterfaceDefinition | RequiredInterfaceDefinition |
		//	ImplementationDefinition | AttributeDefinition | DataDefinition | OutputFlowInterfaceDefinition |
		//	InputFlowInterfaceDefinition)* "}";
		@Override public ParserRule getRule() { return rule; }

		//{PrimitiveDefinition} abstract?="abstract"? "primitive" name=QualifiedName? // support anonymous definitions
		//compositeFormalArgumentsList=FormalArgumentsList? ("extends" superTypes+=PrimitiveSuperType (","
		//superTypes+=PrimitiveSuperType)*)? "{" elements+=(ProvidedInterfaceDefinition | RequiredInterfaceDefinition |
		//ImplementationDefinition | AttributeDefinition | DataDefinition | OutputFlowInterfaceDefinition |
		//InputFlowInterfaceDefinition)* "}"
		public Group getGroup() { return cGroup; }

		//{PrimitiveDefinition}
		public Action getPrimitiveDefinitionAction_0() { return cPrimitiveDefinitionAction_0; }

		//abstract?="abstract"?
		public Assignment getAbstractAssignment_1() { return cAbstractAssignment_1; }

		//"abstract"
		public Keyword getAbstractAbstractKeyword_1_0() { return cAbstractAbstractKeyword_1_0; }

		//"primitive"
		public Keyword getPrimitiveKeyword_2() { return cPrimitiveKeyword_2; }

		//name=QualifiedName?
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_3_0() { return cNameQualifiedNameParserRuleCall_3_0; }

		//compositeFormalArgumentsList=FormalArgumentsList?
		public Assignment getCompositeFormalArgumentsListAssignment_4() { return cCompositeFormalArgumentsListAssignment_4; }

		//FormalArgumentsList
		public RuleCall getCompositeFormalArgumentsListFormalArgumentsListParserRuleCall_4_0() { return cCompositeFormalArgumentsListFormalArgumentsListParserRuleCall_4_0; }

		//("extends" superTypes+=PrimitiveSuperType ("," superTypes+=PrimitiveSuperType)*)?
		public Group getGroup_5() { return cGroup_5; }

		//"extends"
		public Keyword getExtendsKeyword_5_0() { return cExtendsKeyword_5_0; }

		//superTypes+=PrimitiveSuperType
		public Assignment getSuperTypesAssignment_5_1() { return cSuperTypesAssignment_5_1; }

		//PrimitiveSuperType
		public RuleCall getSuperTypesPrimitiveSuperTypeParserRuleCall_5_1_0() { return cSuperTypesPrimitiveSuperTypeParserRuleCall_5_1_0; }

		//("," superTypes+=PrimitiveSuperType)*
		public Group getGroup_5_2() { return cGroup_5_2; }

		//","
		public Keyword getCommaKeyword_5_2_0() { return cCommaKeyword_5_2_0; }

		//superTypes+=PrimitiveSuperType
		public Assignment getSuperTypesAssignment_5_2_1() { return cSuperTypesAssignment_5_2_1; }

		//PrimitiveSuperType
		public RuleCall getSuperTypesPrimitiveSuperTypeParserRuleCall_5_2_1_0() { return cSuperTypesPrimitiveSuperTypeParserRuleCall_5_2_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }

		//elements+=(ProvidedInterfaceDefinition | RequiredInterfaceDefinition | ImplementationDefinition | AttributeDefinition |
		//DataDefinition | OutputFlowInterfaceDefinition | InputFlowInterfaceDefinition)*
		public Assignment getElementsAssignment_7() { return cElementsAssignment_7; }

		//ProvidedInterfaceDefinition | RequiredInterfaceDefinition | ImplementationDefinition | AttributeDefinition |
		//DataDefinition | OutputFlowInterfaceDefinition | InputFlowInterfaceDefinition
		public Alternatives getElementsAlternatives_7_0() { return cElementsAlternatives_7_0; }

		//ProvidedInterfaceDefinition
		public RuleCall getElementsProvidedInterfaceDefinitionParserRuleCall_7_0_0() { return cElementsProvidedInterfaceDefinitionParserRuleCall_7_0_0; }

		//RequiredInterfaceDefinition
		public RuleCall getElementsRequiredInterfaceDefinitionParserRuleCall_7_0_1() { return cElementsRequiredInterfaceDefinitionParserRuleCall_7_0_1; }

		//ImplementationDefinition
		public RuleCall getElementsImplementationDefinitionParserRuleCall_7_0_2() { return cElementsImplementationDefinitionParserRuleCall_7_0_2; }

		//AttributeDefinition
		public RuleCall getElementsAttributeDefinitionParserRuleCall_7_0_3() { return cElementsAttributeDefinitionParserRuleCall_7_0_3; }

		//DataDefinition
		public RuleCall getElementsDataDefinitionParserRuleCall_7_0_4() { return cElementsDataDefinitionParserRuleCall_7_0_4; }

		//OutputFlowInterfaceDefinition
		public RuleCall getElementsOutputFlowInterfaceDefinitionParserRuleCall_7_0_5() { return cElementsOutputFlowInterfaceDefinitionParserRuleCall_7_0_5; }

		//InputFlowInterfaceDefinition
		public RuleCall getElementsInputFlowInterfaceDefinitionParserRuleCall_7_0_6() { return cElementsInputFlowInterfaceDefinitionParserRuleCall_7_0_6; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class TypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperTypesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSuperTypesTypeDefinitionCrossReference_2_1_0 = (CrossReference)cSuperTypesAssignment_2_1.eContents().get(0);
		private final RuleCall cSuperTypesTypeDefinitionQualifiedNameParserRuleCall_2_1_0_1 = (RuleCall)cSuperTypesTypeDefinitionCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cSuperTypesAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final CrossReference cSuperTypesTypeDefinitionCrossReference_2_2_1_0 = (CrossReference)cSuperTypesAssignment_2_2_1.eContents().get(0);
		private final RuleCall cSuperTypesTypeDefinitionQualifiedNameParserRuleCall_2_2_1_0_1 = (RuleCall)cSuperTypesTypeDefinitionCrossReference_2_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cElementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Alternatives cElementsAlternatives_4_0 = (Alternatives)cElementsAssignment_4.eContents().get(0);
		private final RuleCall cElementsProvidedInterfaceDefinitionParserRuleCall_4_0_0 = (RuleCall)cElementsAlternatives_4_0.eContents().get(0);
		private final RuleCall cElementsRequiredInterfaceDefinitionParserRuleCall_4_0_1 = (RuleCall)cElementsAlternatives_4_0.eContents().get(1);
		private final RuleCall cElementsOutputFlowInterfaceDefinitionParserRuleCall_4_0_2 = (RuleCall)cElementsAlternatives_4_0.eContents().get(2);
		private final RuleCall cElementsInputFlowInterfaceDefinitionParserRuleCall_4_0_3 = (RuleCall)cElementsAlternatives_4_0.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//TypeDefinition:
		//	"type" name=QualifiedName ("extends" superTypes+=[TypeDefinition|QualifiedName] (","
		//	superTypes+=[TypeDefinition|QualifiedName])*)? "{" elements+=(ProvidedInterfaceDefinition |
		//	RequiredInterfaceDefinition | OutputFlowInterfaceDefinition | InputFlowInterfaceDefinition)* "}";
		@Override public ParserRule getRule() { return rule; }

		//"type" name=QualifiedName ("extends" superTypes+=[TypeDefinition|QualifiedName] (","
		//superTypes+=[TypeDefinition|QualifiedName])*)? "{" elements+=(ProvidedInterfaceDefinition |
		//RequiredInterfaceDefinition | OutputFlowInterfaceDefinition | InputFlowInterfaceDefinition)* "}"
		public Group getGroup() { return cGroup; }

		//"type"
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//("extends" superTypes+=[TypeDefinition|QualifiedName] ("," superTypes+=[TypeDefinition|QualifiedName])*)?
		public Group getGroup_2() { return cGroup_2; }

		//"extends"
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }

		//superTypes+=[TypeDefinition|QualifiedName]
		public Assignment getSuperTypesAssignment_2_1() { return cSuperTypesAssignment_2_1; }

		//[TypeDefinition|QualifiedName]
		public CrossReference getSuperTypesTypeDefinitionCrossReference_2_1_0() { return cSuperTypesTypeDefinitionCrossReference_2_1_0; }

		//QualifiedName
		public RuleCall getSuperTypesTypeDefinitionQualifiedNameParserRuleCall_2_1_0_1() { return cSuperTypesTypeDefinitionQualifiedNameParserRuleCall_2_1_0_1; }

		//("," superTypes+=[TypeDefinition|QualifiedName])*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//superTypes+=[TypeDefinition|QualifiedName]
		public Assignment getSuperTypesAssignment_2_2_1() { return cSuperTypesAssignment_2_2_1; }

		//[TypeDefinition|QualifiedName]
		public CrossReference getSuperTypesTypeDefinitionCrossReference_2_2_1_0() { return cSuperTypesTypeDefinitionCrossReference_2_2_1_0; }

		//QualifiedName
		public RuleCall getSuperTypesTypeDefinitionQualifiedNameParserRuleCall_2_2_1_0_1() { return cSuperTypesTypeDefinitionQualifiedNameParserRuleCall_2_2_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//elements+=(ProvidedInterfaceDefinition | RequiredInterfaceDefinition | OutputFlowInterfaceDefinition |
		//InputFlowInterfaceDefinition)*
		public Assignment getElementsAssignment_4() { return cElementsAssignment_4; }

		//ProvidedInterfaceDefinition | RequiredInterfaceDefinition | OutputFlowInterfaceDefinition | InputFlowInterfaceDefinition
		public Alternatives getElementsAlternatives_4_0() { return cElementsAlternatives_4_0; }

		//ProvidedInterfaceDefinition
		public RuleCall getElementsProvidedInterfaceDefinitionParserRuleCall_4_0_0() { return cElementsProvidedInterfaceDefinitionParserRuleCall_4_0_0; }

		//RequiredInterfaceDefinition
		public RuleCall getElementsRequiredInterfaceDefinitionParserRuleCall_4_0_1() { return cElementsRequiredInterfaceDefinitionParserRuleCall_4_0_1; }

		//OutputFlowInterfaceDefinition
		public RuleCall getElementsOutputFlowInterfaceDefinitionParserRuleCall_4_0_2() { return cElementsOutputFlowInterfaceDefinitionParserRuleCall_4_0_2; }

		//InputFlowInterfaceDefinition
		public RuleCall getElementsInputFlowInterfaceDefinitionParserRuleCall_4_0_3() { return cElementsInputFlowInterfaceDefinitionParserRuleCall_4_0_3; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class CompositeSuperTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompositeSuperType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTargetArchDefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTargetArchDefCompositeSuperTypeDefinitionCrossReference_0_0 = (CrossReference)cTargetArchDefAssignment_0.eContents().get(0);
		private final RuleCall cTargetArchDefCompositeSuperTypeDefinitionQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cTargetArchDefCompositeSuperTypeDefinitionCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTemplatesListAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTemplatesListTemplateReferenceParserRuleCall_1_1_0 = (RuleCall)cTemplatesListAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cTemplatesListAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cTemplatesListTemplateReferenceParserRuleCall_1_2_1_0 = (RuleCall)cTemplatesListAssignment_1_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cArgumentsListAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cArgumentsListArgumentDefinitionParserRuleCall_2_1_0 = (RuleCall)cArgumentsListAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cArgumentsListAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cArgumentsListArgumentDefinitionParserRuleCall_2_2_1_0 = (RuleCall)cArgumentsListAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//CompositeSuperType:
		//	targetArchDef=[CompositeSuperTypeDefinition|QualifiedName] ("<" templatesList+=TemplateReference (","
		//	templatesList+=TemplateReference)* ">")? ("(" argumentsList+=ArgumentDefinition (","
		//	argumentsList+=ArgumentDefinition)* ")")?;
		@Override public ParserRule getRule() { return rule; }

		//targetArchDef=[CompositeSuperTypeDefinition|QualifiedName] ("<" templatesList+=TemplateReference (","
		//templatesList+=TemplateReference)* ">")? ("(" argumentsList+=ArgumentDefinition (","
		//argumentsList+=ArgumentDefinition)* ")")?
		public Group getGroup() { return cGroup; }

		//targetArchDef=[CompositeSuperTypeDefinition|QualifiedName]
		public Assignment getTargetArchDefAssignment_0() { return cTargetArchDefAssignment_0; }

		//[CompositeSuperTypeDefinition|QualifiedName]
		public CrossReference getTargetArchDefCompositeSuperTypeDefinitionCrossReference_0_0() { return cTargetArchDefCompositeSuperTypeDefinitionCrossReference_0_0; }

		//QualifiedName
		public RuleCall getTargetArchDefCompositeSuperTypeDefinitionQualifiedNameParserRuleCall_0_0_1() { return cTargetArchDefCompositeSuperTypeDefinitionQualifiedNameParserRuleCall_0_0_1; }

		//("<" templatesList+=TemplateReference ("," templatesList+=TemplateReference)* ">")?
		public Group getGroup_1() { return cGroup_1; }

		//"<"
		public Keyword getLessThanSignKeyword_1_0() { return cLessThanSignKeyword_1_0; }

		//templatesList+=TemplateReference
		public Assignment getTemplatesListAssignment_1_1() { return cTemplatesListAssignment_1_1; }

		//TemplateReference
		public RuleCall getTemplatesListTemplateReferenceParserRuleCall_1_1_0() { return cTemplatesListTemplateReferenceParserRuleCall_1_1_0; }

		//("," templatesList+=TemplateReference)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//templatesList+=TemplateReference
		public Assignment getTemplatesListAssignment_1_2_1() { return cTemplatesListAssignment_1_2_1; }

		//TemplateReference
		public RuleCall getTemplatesListTemplateReferenceParserRuleCall_1_2_1_0() { return cTemplatesListTemplateReferenceParserRuleCall_1_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_3() { return cGreaterThanSignKeyword_1_3; }

		//("(" argumentsList+=ArgumentDefinition ("," argumentsList+=ArgumentDefinition)* ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//argumentsList+=ArgumentDefinition
		public Assignment getArgumentsListAssignment_2_1() { return cArgumentsListAssignment_2_1; }

		//ArgumentDefinition
		public RuleCall getArgumentsListArgumentDefinitionParserRuleCall_2_1_0() { return cArgumentsListArgumentDefinitionParserRuleCall_2_1_0; }

		//("," argumentsList+=ArgumentDefinition)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//argumentsList+=ArgumentDefinition
		public Assignment getArgumentsListAssignment_2_2_1() { return cArgumentsListAssignment_2_2_1; }

		//ArgumentDefinition
		public RuleCall getArgumentsListArgumentDefinitionParserRuleCall_2_2_1_0() { return cArgumentsListArgumentDefinitionParserRuleCall_2_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
	}

	public class PrimitiveSuperTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimitiveSuperType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTargetArchDefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTargetArchDefPrimitiveSuperTypeDefinitionCrossReference_0_0 = (CrossReference)cTargetArchDefAssignment_0.eContents().get(0);
		private final RuleCall cTargetArchDefPrimitiveSuperTypeDefinitionQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cTargetArchDefPrimitiveSuperTypeDefinitionCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cArgumentsListAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArgumentsListArgumentDefinitionParserRuleCall_1_1_0 = (RuleCall)cArgumentsListAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cArgumentsListAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cArgumentsListArgumentDefinitionParserRuleCall_1_2_1_0 = (RuleCall)cArgumentsListAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//PrimitiveSuperType:
		//	targetArchDef=[PrimitiveSuperTypeDefinition|QualifiedName] ("(" argumentsList+=ArgumentDefinition (","
		//	argumentsList+=ArgumentDefinition)* ")")?;
		@Override public ParserRule getRule() { return rule; }

		//targetArchDef=[PrimitiveSuperTypeDefinition|QualifiedName] ("(" argumentsList+=ArgumentDefinition (","
		//argumentsList+=ArgumentDefinition)* ")")?
		public Group getGroup() { return cGroup; }

		//targetArchDef=[PrimitiveSuperTypeDefinition|QualifiedName]
		public Assignment getTargetArchDefAssignment_0() { return cTargetArchDefAssignment_0; }

		//[PrimitiveSuperTypeDefinition|QualifiedName]
		public CrossReference getTargetArchDefPrimitiveSuperTypeDefinitionCrossReference_0_0() { return cTargetArchDefPrimitiveSuperTypeDefinitionCrossReference_0_0; }

		//QualifiedName
		public RuleCall getTargetArchDefPrimitiveSuperTypeDefinitionQualifiedNameParserRuleCall_0_0_1() { return cTargetArchDefPrimitiveSuperTypeDefinitionQualifiedNameParserRuleCall_0_0_1; }

		//("(" argumentsList+=ArgumentDefinition ("," argumentsList+=ArgumentDefinition)* ")")?
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//argumentsList+=ArgumentDefinition
		public Assignment getArgumentsListAssignment_1_1() { return cArgumentsListAssignment_1_1; }

		//ArgumentDefinition
		public RuleCall getArgumentsListArgumentDefinitionParserRuleCall_1_1_0() { return cArgumentsListArgumentDefinitionParserRuleCall_1_1_0; }

		//("," argumentsList+=ArgumentDefinition)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//argumentsList+=ArgumentDefinition
		public Assignment getArgumentsListAssignment_1_2_1() { return cArgumentsListAssignment_1_2_1; }

		//ArgumentDefinition
		public RuleCall getArgumentsListArgumentDefinitionParserRuleCall_1_2_1_0() { return cArgumentsListArgumentDefinitionParserRuleCall_1_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}

	public class CompositeSuperTypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompositeSuperTypeDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCompositeDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTypeDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//CompositeSuperTypeDefinition:
		//	CompositeDefinition | TypeDefinition;
		@Override public ParserRule getRule() { return rule; }

		//CompositeDefinition | TypeDefinition
		public Alternatives getAlternatives() { return cAlternatives; }

		//CompositeDefinition
		public RuleCall getCompositeDefinitionParserRuleCall_0() { return cCompositeDefinitionParserRuleCall_0; }

		//TypeDefinition
		public RuleCall getTypeDefinitionParserRuleCall_1() { return cTypeDefinitionParserRuleCall_1; }
	}

	public class PrimitiveSuperTypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimitiveSuperTypeDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimitiveDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTypeDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PrimitiveSuperTypeDefinition:
		//	PrimitiveDefinition | TypeDefinition;
		@Override public ParserRule getRule() { return rule; }

		//PrimitiveDefinition | TypeDefinition
		public Alternatives getAlternatives() { return cAlternatives; }

		//PrimitiveDefinition
		public RuleCall getPrimitiveDefinitionParserRuleCall_0() { return cPrimitiveDefinitionParserRuleCall_0; }

		//TypeDefinition
		public RuleCall getTypeDefinitionParserRuleCall_1() { return cTypeDefinitionParserRuleCall_1; }
	}

	public class HostedInterfaceDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HostedInterfaceDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cProvidedInterfaceDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRequiredInterfaceDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOutputFlowInterfaceDefinitionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cInputFlowInterfaceDefinitionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//HostedInterfaceDefinition:
		//	ProvidedInterfaceDefinition | RequiredInterfaceDefinition | OutputFlowInterfaceDefinition |
		//	InputFlowInterfaceDefinition;
		@Override public ParserRule getRule() { return rule; }

		//ProvidedInterfaceDefinition | RequiredInterfaceDefinition | OutputFlowInterfaceDefinition | InputFlowInterfaceDefinition
		public Alternatives getAlternatives() { return cAlternatives; }

		//ProvidedInterfaceDefinition
		public RuleCall getProvidedInterfaceDefinitionParserRuleCall_0() { return cProvidedInterfaceDefinitionParserRuleCall_0; }

		//RequiredInterfaceDefinition
		public RuleCall getRequiredInterfaceDefinitionParserRuleCall_1() { return cRequiredInterfaceDefinitionParserRuleCall_1; }

		//OutputFlowInterfaceDefinition
		public RuleCall getOutputFlowInterfaceDefinitionParserRuleCall_2() { return cOutputFlowInterfaceDefinitionParserRuleCall_2; }

		//InputFlowInterfaceDefinition
		public RuleCall getInputFlowInterfaceDefinitionParserRuleCall_3() { return cInputFlowInterfaceDefinitionParserRuleCall_3; }
	}

	public class ProvidedInterfaceDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProvidedInterfaceDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsListAnnotationsListParserRuleCall_0_0 = (RuleCall)cAnnotationsListAssignment_0.eContents().get(0);
		private final Assignment cRoleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cRoleProvidesKeyword_1_0 = (Keyword)cRoleAssignment_1.eContents().get(0);
		private final Assignment cSignatureAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSignatureInterfaceDefinitionCrossReference_2_0 = (CrossReference)cSignatureAssignment_2.eContents().get(0);
		private final RuleCall cSignatureInterfaceDefinitionQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cSignatureInterfaceDefinitionCrossReference_2_0.eContents().get(1);
		private final Keyword cAsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cCollectionAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final Keyword cCollectionLeftSquareBracketKeyword_5_0_0 = (Keyword)cCollectionAssignment_5_0.eContents().get(0);
		private final Assignment cCollectionsizeAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cCollectionsizeINTTerminalRuleCall_5_1_0 = (RuleCall)cCollectionsizeAssignment_5_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//// Renamed as HostedInterfaceDefinition to resolve name clash with fractalItf::InterfaceDefinition
		//// Another way to solve the problem is to use prefixes ?
		//ProvidedInterfaceDefinition:
		//	annotationsList=AnnotationsList? role="provides" signature=[Itf::InterfaceDefinition|QualifiedName] "as" name=ID
		//	(collection?="[" collectionsize=INT? "]")? ";";
		@Override public ParserRule getRule() { return rule; }

		//annotationsList=AnnotationsList? role="provides" signature=[Itf::InterfaceDefinition|QualifiedName] "as" name=ID
		//(collection?="[" collectionsize=INT? "]")? ";"
		public Group getGroup() { return cGroup; }

		//annotationsList=AnnotationsList?
		public Assignment getAnnotationsListAssignment_0() { return cAnnotationsListAssignment_0; }

		//AnnotationsList
		public RuleCall getAnnotationsListAnnotationsListParserRuleCall_0_0() { return cAnnotationsListAnnotationsListParserRuleCall_0_0; }

		//role="provides"
		public Assignment getRoleAssignment_1() { return cRoleAssignment_1; }

		//"provides"
		public Keyword getRoleProvidesKeyword_1_0() { return cRoleProvidesKeyword_1_0; }

		//signature=[Itf::InterfaceDefinition|QualifiedName]
		public Assignment getSignatureAssignment_2() { return cSignatureAssignment_2; }

		//[Itf::InterfaceDefinition|QualifiedName]
		public CrossReference getSignatureInterfaceDefinitionCrossReference_2_0() { return cSignatureInterfaceDefinitionCrossReference_2_0; }

		//QualifiedName
		public RuleCall getSignatureInterfaceDefinitionQualifiedNameParserRuleCall_2_0_1() { return cSignatureInterfaceDefinitionQualifiedNameParserRuleCall_2_0_1; }

		//"as"
		public Keyword getAsKeyword_3() { return cAsKeyword_3; }

		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }

		//(collection?="[" collectionsize=INT? "]")?
		public Group getGroup_5() { return cGroup_5; }

		//collection?="["
		public Assignment getCollectionAssignment_5_0() { return cCollectionAssignment_5_0; }

		//"["
		public Keyword getCollectionLeftSquareBracketKeyword_5_0_0() { return cCollectionLeftSquareBracketKeyword_5_0_0; }

		//collectionsize=INT?
		public Assignment getCollectionsizeAssignment_5_1() { return cCollectionsizeAssignment_5_1; }

		//INT
		public RuleCall getCollectionsizeINTTerminalRuleCall_5_1_0() { return cCollectionsizeINTTerminalRuleCall_5_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_5_2() { return cRightSquareBracketKeyword_5_2; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class RequiredInterfaceDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RequiredInterfaceDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsListAnnotationsListParserRuleCall_0_0 = (RuleCall)cAnnotationsListAssignment_0.eContents().get(0);
		private final Assignment cRoleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cRoleRequiresKeyword_1_0 = (Keyword)cRoleAssignment_1.eContents().get(0);
		private final Assignment cOptionalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cOptionalOptionalKeyword_2_0 = (Keyword)cOptionalAssignment_2.eContents().get(0);
		private final Assignment cSignatureAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cSignatureInterfaceDefinitionCrossReference_3_0 = (CrossReference)cSignatureAssignment_3.eContents().get(0);
		private final RuleCall cSignatureInterfaceDefinitionQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cSignatureInterfaceDefinitionCrossReference_3_0.eContents().get(1);
		private final Keyword cAsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameIDTerminalRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cCollectionAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final Keyword cCollectionLeftSquareBracketKeyword_6_0_0 = (Keyword)cCollectionAssignment_6_0.eContents().get(0);
		private final Assignment cCollectionsizeAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cCollectionsizeINTTerminalRuleCall_6_1_0 = (RuleCall)cCollectionsizeAssignment_6_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//RequiredInterfaceDefinition:
		//	annotationsList=AnnotationsList? role="requires" optional?="optional"?
		//	signature=[Itf::InterfaceDefinition|QualifiedName] "as" name=ID (collection?="[" collectionsize=INT? "]")? ";";
		@Override public ParserRule getRule() { return rule; }

		//annotationsList=AnnotationsList? role="requires" optional?="optional"?
		//signature=[Itf::InterfaceDefinition|QualifiedName] "as" name=ID (collection?="[" collectionsize=INT? "]")? ";"
		public Group getGroup() { return cGroup; }

		//annotationsList=AnnotationsList?
		public Assignment getAnnotationsListAssignment_0() { return cAnnotationsListAssignment_0; }

		//AnnotationsList
		public RuleCall getAnnotationsListAnnotationsListParserRuleCall_0_0() { return cAnnotationsListAnnotationsListParserRuleCall_0_0; }

		//role="requires"
		public Assignment getRoleAssignment_1() { return cRoleAssignment_1; }

		//"requires"
		public Keyword getRoleRequiresKeyword_1_0() { return cRoleRequiresKeyword_1_0; }

		//optional?="optional"?
		public Assignment getOptionalAssignment_2() { return cOptionalAssignment_2; }

		//"optional"
		public Keyword getOptionalOptionalKeyword_2_0() { return cOptionalOptionalKeyword_2_0; }

		//signature=[Itf::InterfaceDefinition|QualifiedName]
		public Assignment getSignatureAssignment_3() { return cSignatureAssignment_3; }

		//[Itf::InterfaceDefinition|QualifiedName]
		public CrossReference getSignatureInterfaceDefinitionCrossReference_3_0() { return cSignatureInterfaceDefinitionCrossReference_3_0; }

		//QualifiedName
		public RuleCall getSignatureInterfaceDefinitionQualifiedNameParserRuleCall_3_0_1() { return cSignatureInterfaceDefinitionQualifiedNameParserRuleCall_3_0_1; }

		//"as"
		public Keyword getAsKeyword_4() { return cAsKeyword_4; }

		//name=ID
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_5_0() { return cNameIDTerminalRuleCall_5_0; }

		//(collection?="[" collectionsize=INT? "]")?
		public Group getGroup_6() { return cGroup_6; }

		//collection?="["
		public Assignment getCollectionAssignment_6_0() { return cCollectionAssignment_6_0; }

		//"["
		public Keyword getCollectionLeftSquareBracketKeyword_6_0_0() { return cCollectionLeftSquareBracketKeyword_6_0_0; }

		//collectionsize=INT?
		public Assignment getCollectionsizeAssignment_6_1() { return cCollectionsizeAssignment_6_1; }

		//INT
		public RuleCall getCollectionsizeINTTerminalRuleCall_6_1_0() { return cCollectionsizeINTTerminalRuleCall_6_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_6_2() { return cRightSquareBracketKeyword_6_2; }

		//";"
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}

	public class OutputFlowInterfaceDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OutputFlowInterfaceDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsListAnnotationsListParserRuleCall_0_0 = (RuleCall)cAnnotationsListAssignment_0.eContents().get(0);
		private final Assignment cRoleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cRoleOutputKeyword_1_0 = (Keyword)cRoleAssignment_1.eContents().get(0);
		private final Assignment cSignatureAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSignatureFlowTypeParserRuleCall_2_0 = (RuleCall)cSignatureAssignment_2.eContents().get(0);
		private final Keyword cAsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cCollectionAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final Keyword cCollectionLeftSquareBracketKeyword_5_0_0 = (Keyword)cCollectionAssignment_5_0.eContents().get(0);
		private final Assignment cCollectionsizeAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cCollectionsizeINTTerminalRuleCall_5_1_0 = (RuleCall)cCollectionsizeAssignment_5_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//OutputFlowInterfaceDefinition:
		//	annotationsList=AnnotationsList? role="output" signature=FlowType "as" name=ID (collection?="[" collectionsize=INT?
		//	"]")? ";";
		@Override public ParserRule getRule() { return rule; }

		//annotationsList=AnnotationsList? role="output" signature=FlowType "as" name=ID (collection?="[" collectionsize=INT?
		//"]")? ";"
		public Group getGroup() { return cGroup; }

		//annotationsList=AnnotationsList?
		public Assignment getAnnotationsListAssignment_0() { return cAnnotationsListAssignment_0; }

		//AnnotationsList
		public RuleCall getAnnotationsListAnnotationsListParserRuleCall_0_0() { return cAnnotationsListAnnotationsListParserRuleCall_0_0; }

		//role="output"
		public Assignment getRoleAssignment_1() { return cRoleAssignment_1; }

		//"output"
		public Keyword getRoleOutputKeyword_1_0() { return cRoleOutputKeyword_1_0; }

		//signature=FlowType
		public Assignment getSignatureAssignment_2() { return cSignatureAssignment_2; }

		//FlowType
		public RuleCall getSignatureFlowTypeParserRuleCall_2_0() { return cSignatureFlowTypeParserRuleCall_2_0; }

		//"as"
		public Keyword getAsKeyword_3() { return cAsKeyword_3; }

		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }

		//(collection?="[" collectionsize=INT? "]")?
		public Group getGroup_5() { return cGroup_5; }

		//collection?="["
		public Assignment getCollectionAssignment_5_0() { return cCollectionAssignment_5_0; }

		//"["
		public Keyword getCollectionLeftSquareBracketKeyword_5_0_0() { return cCollectionLeftSquareBracketKeyword_5_0_0; }

		//collectionsize=INT?
		public Assignment getCollectionsizeAssignment_5_1() { return cCollectionsizeAssignment_5_1; }

		//INT
		public RuleCall getCollectionsizeINTTerminalRuleCall_5_1_0() { return cCollectionsizeINTTerminalRuleCall_5_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_5_2() { return cRightSquareBracketKeyword_5_2; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class InputFlowInterfaceDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InputFlowInterfaceDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsListAnnotationsListParserRuleCall_0_0 = (RuleCall)cAnnotationsListAssignment_0.eContents().get(0);
		private final Assignment cRoleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cRoleInputKeyword_1_0 = (Keyword)cRoleAssignment_1.eContents().get(0);
		private final Assignment cOptionalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cOptionalOptionalKeyword_2_0 = (Keyword)cOptionalAssignment_2.eContents().get(0);
		private final Assignment cSignatureAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSignatureFlowTypeParserRuleCall_3_0 = (RuleCall)cSignatureAssignment_3.eContents().get(0);
		private final Keyword cAsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameIDTerminalRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cCollectionAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final Keyword cCollectionLeftSquareBracketKeyword_6_0_0 = (Keyword)cCollectionAssignment_6_0.eContents().get(0);
		private final Assignment cCollectionsizeAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cCollectionsizeINTTerminalRuleCall_6_1_0 = (RuleCall)cCollectionsizeAssignment_6_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//InputFlowInterfaceDefinition:
		//	annotationsList=AnnotationsList? role="input" optional?="optional"? signature=FlowType "as" name=ID (collection?="["
		//	collectionsize=INT? "]")? ";";
		@Override public ParserRule getRule() { return rule; }

		//annotationsList=AnnotationsList? role="input" optional?="optional"? signature=FlowType "as" name=ID (collection?="["
		//collectionsize=INT? "]")? ";"
		public Group getGroup() { return cGroup; }

		//annotationsList=AnnotationsList?
		public Assignment getAnnotationsListAssignment_0() { return cAnnotationsListAssignment_0; }

		//AnnotationsList
		public RuleCall getAnnotationsListAnnotationsListParserRuleCall_0_0() { return cAnnotationsListAnnotationsListParserRuleCall_0_0; }

		//role="input"
		public Assignment getRoleAssignment_1() { return cRoleAssignment_1; }

		//"input"
		public Keyword getRoleInputKeyword_1_0() { return cRoleInputKeyword_1_0; }

		//optional?="optional"?
		public Assignment getOptionalAssignment_2() { return cOptionalAssignment_2; }

		//"optional"
		public Keyword getOptionalOptionalKeyword_2_0() { return cOptionalOptionalKeyword_2_0; }

		//signature=FlowType
		public Assignment getSignatureAssignment_3() { return cSignatureAssignment_3; }

		//FlowType
		public RuleCall getSignatureFlowTypeParserRuleCall_3_0() { return cSignatureFlowTypeParserRuleCall_3_0; }

		//"as"
		public Keyword getAsKeyword_4() { return cAsKeyword_4; }

		//name=ID
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_5_0() { return cNameIDTerminalRuleCall_5_0; }

		//(collection?="[" collectionsize=INT? "]")?
		public Group getGroup_6() { return cGroup_6; }

		//collection?="["
		public Assignment getCollectionAssignment_6_0() { return cCollectionAssignment_6_0; }

		//"["
		public Keyword getCollectionLeftSquareBracketKeyword_6_0_0() { return cCollectionLeftSquareBracketKeyword_6_0_0; }

		//collectionsize=INT?
		public Assignment getCollectionsizeAssignment_6_1() { return cCollectionsizeAssignment_6_1; }

		//INT
		public RuleCall getCollectionsizeINTTerminalRuleCall_6_1_0() { return cCollectionsizeINTTerminalRuleCall_6_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_6_2() { return cRightSquareBracketKeyword_6_2; }

		//";"
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}

	public class FlowTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FlowType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAttributeTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//FlowType:
		//	AttributeType | IDTType;
		@Override public ParserRule getRule() { return rule; }

		//AttributeType | IDTType
		public Alternatives getAlternatives() { return cAlternatives; }

		//AttributeType
		public RuleCall getAttributeTypeParserRuleCall_0() { return cAttributeTypeParserRuleCall_0; }

		//IDTType
		public RuleCall getIDTTypeParserRuleCall_1() { return cIDTTypeParserRuleCall_1; }
	}

	public class IDTTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IDTType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPathAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPathFilePathParserRuleCall_0_0 = (RuleCall)cPathAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cStructKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Keyword cEnumKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Keyword cUnionKeyword_2_2 = (Keyword)cAlternatives_2.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		
		//IDTType:
		//	path=FilePath ":" ("struct" | "enum" | "union")? name=ID;
		@Override public ParserRule getRule() { return rule; }

		//path=FilePath ":" ("struct" | "enum" | "union")? name=ID
		public Group getGroup() { return cGroup; }

		//path=FilePath
		public Assignment getPathAssignment_0() { return cPathAssignment_0; }

		//FilePath
		public RuleCall getPathFilePathParserRuleCall_0_0() { return cPathFilePathParserRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//("struct" | "enum" | "union")?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"struct"
		public Keyword getStructKeyword_2_0() { return cStructKeyword_2_0; }

		//"enum"
		public Keyword getEnumKeyword_2_1() { return cEnumKeyword_2_1; }

		//"union"
		public Keyword getUnionKeyword_2_2() { return cUnionKeyword_2_2; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
	}

	public class TypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cArchitectureDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTemplateSpecifierParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TypeReference:
		//	ArchitectureDefinition | TemplateSpecifier;
		@Override public ParserRule getRule() { return rule; }

		//ArchitectureDefinition | TemplateSpecifier
		public Alternatives getAlternatives() { return cAlternatives; }

		//ArchitectureDefinition
		public RuleCall getArchitectureDefinitionParserRuleCall_0() { return cArchitectureDefinitionParserRuleCall_0; }

		//TemplateSpecifier
		public RuleCall getTemplateSpecifierParserRuleCall_1() { return cTemplateSpecifierParserRuleCall_1; }
	}

	public class SubComponentDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubComponentDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsListAnnotationsListParserRuleCall_0_0 = (RuleCall)cAnnotationsListAssignment_0.eContents().get(0);
		private final Keyword cContainsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeTypeReferenceCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeTypeReferenceQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cTypeTypeReferenceCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLessThanSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTemplatesListAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTemplatesListTemplateReferenceParserRuleCall_3_1_0 = (RuleCall)cTemplatesListAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cTemplatesListAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cTemplatesListTemplateReferenceParserRuleCall_3_2_1_0 = (RuleCall)cTemplatesListAssignment_3_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cArgumentsListAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cArgumentsListArgumentDefinitionParserRuleCall_4_1_0 = (RuleCall)cArgumentsListAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cArgumentsListAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cArgumentsListArgumentDefinitionParserRuleCall_4_2_1_0 = (RuleCall)cArgumentsListAssignment_4_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Keyword cAsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cNameAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cNameIDTerminalRuleCall_6_0 = (RuleCall)cNameAssignment_6.eContents().get(0);
		private final Assignment cBodyAnnotationsListAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cBodyAnnotationsListAnnotationsListParserRuleCall_7_0 = (RuleCall)cBodyAnnotationsListAssignment_7.eContents().get(0);
		private final Assignment cBodyAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final Alternatives cBodyAlternatives_8_0 = (Alternatives)cBodyAssignment_8.eContents().get(0);
		private final RuleCall cBodyCompositeDefinitionParserRuleCall_8_0_0 = (RuleCall)cBodyAlternatives_8_0.eContents().get(0);
		private final RuleCall cBodyPrimitiveDefinitionParserRuleCall_8_0_1 = (RuleCall)cBodyAlternatives_8_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//// Original: can do anything but needs lots of manual scoping/validation
		//SubComponentDefinition:
		//	annotationsList=AnnotationsList? "contains" type=[TypeReference|QualifiedName]? ("<" templatesList+=TemplateReference
		//	("," templatesList+=TemplateReference)* ">")? ("(" argumentsList+=ArgumentDefinition (","
		//	argumentsList+=ArgumentDefinition)* ")")? "as" name=ID bodyAnnotationsList=AnnotationsList? body=(CompositeDefinition
		//	| PrimitiveDefinition)? ";";
		@Override public ParserRule getRule() { return rule; }

		//annotationsList=AnnotationsList? "contains" type=[TypeReference|QualifiedName]? ("<" templatesList+=TemplateReference
		//("," templatesList+=TemplateReference)* ">")? ("(" argumentsList+=ArgumentDefinition (","
		//argumentsList+=ArgumentDefinition)* ")")? "as" name=ID bodyAnnotationsList=AnnotationsList? body=(CompositeDefinition
		//| PrimitiveDefinition)? ";"
		public Group getGroup() { return cGroup; }

		//annotationsList=AnnotationsList?
		public Assignment getAnnotationsListAssignment_0() { return cAnnotationsListAssignment_0; }

		//AnnotationsList
		public RuleCall getAnnotationsListAnnotationsListParserRuleCall_0_0() { return cAnnotationsListAnnotationsListParserRuleCall_0_0; }

		//"contains"
		public Keyword getContainsKeyword_1() { return cContainsKeyword_1; }

		//type=[TypeReference|QualifiedName]?
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//[TypeReference|QualifiedName]
		public CrossReference getTypeTypeReferenceCrossReference_2_0() { return cTypeTypeReferenceCrossReference_2_0; }

		//QualifiedName
		public RuleCall getTypeTypeReferenceQualifiedNameParserRuleCall_2_0_1() { return cTypeTypeReferenceQualifiedNameParserRuleCall_2_0_1; }

		//("<" templatesList+=TemplateReference ("," templatesList+=TemplateReference)* ">")?
		public Group getGroup_3() { return cGroup_3; }

		//"<"
		public Keyword getLessThanSignKeyword_3_0() { return cLessThanSignKeyword_3_0; }

		//templatesList+=TemplateReference
		public Assignment getTemplatesListAssignment_3_1() { return cTemplatesListAssignment_3_1; }

		//TemplateReference
		public RuleCall getTemplatesListTemplateReferenceParserRuleCall_3_1_0() { return cTemplatesListTemplateReferenceParserRuleCall_3_1_0; }

		//("," templatesList+=TemplateReference)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//templatesList+=TemplateReference
		public Assignment getTemplatesListAssignment_3_2_1() { return cTemplatesListAssignment_3_2_1; }

		//TemplateReference
		public RuleCall getTemplatesListTemplateReferenceParserRuleCall_3_2_1_0() { return cTemplatesListTemplateReferenceParserRuleCall_3_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_3_3() { return cGreaterThanSignKeyword_3_3; }

		//("(" argumentsList+=ArgumentDefinition ("," argumentsList+=ArgumentDefinition)* ")")?
		public Group getGroup_4() { return cGroup_4; }

		//"("
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }

		//argumentsList+=ArgumentDefinition
		public Assignment getArgumentsListAssignment_4_1() { return cArgumentsListAssignment_4_1; }

		//ArgumentDefinition
		public RuleCall getArgumentsListArgumentDefinitionParserRuleCall_4_1_0() { return cArgumentsListArgumentDefinitionParserRuleCall_4_1_0; }

		//("," argumentsList+=ArgumentDefinition)*
		public Group getGroup_4_2() { return cGroup_4_2; }

		//","
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }

		//argumentsList+=ArgumentDefinition
		public Assignment getArgumentsListAssignment_4_2_1() { return cArgumentsListAssignment_4_2_1; }

		//ArgumentDefinition
		public RuleCall getArgumentsListArgumentDefinitionParserRuleCall_4_2_1_0() { return cArgumentsListArgumentDefinitionParserRuleCall_4_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4_3() { return cRightParenthesisKeyword_4_3; }

		//"as"
		public Keyword getAsKeyword_5() { return cAsKeyword_5; }

		//name=ID
		public Assignment getNameAssignment_6() { return cNameAssignment_6; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_6_0() { return cNameIDTerminalRuleCall_6_0; }

		//bodyAnnotationsList=AnnotationsList?
		public Assignment getBodyAnnotationsListAssignment_7() { return cBodyAnnotationsListAssignment_7; }

		//AnnotationsList
		public RuleCall getBodyAnnotationsListAnnotationsListParserRuleCall_7_0() { return cBodyAnnotationsListAnnotationsListParserRuleCall_7_0; }

		//body=(CompositeDefinition | PrimitiveDefinition)?
		public Assignment getBodyAssignment_8() { return cBodyAssignment_8; }

		//CompositeDefinition | PrimitiveDefinition
		public Alternatives getBodyAlternatives_8_0() { return cBodyAlternatives_8_0; }

		//CompositeDefinition
		public RuleCall getBodyCompositeDefinitionParserRuleCall_8_0_0() { return cBodyCompositeDefinitionParserRuleCall_8_0_0; }

		//PrimitiveDefinition
		public RuleCall getBodyPrimitiveDefinitionParserRuleCall_8_0_1() { return cBodyPrimitiveDefinitionParserRuleCall_8_0_1; }

		//";"
		public Keyword getSemicolonKeyword_9() { return cSemicolonKeyword_9; }
	}

	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCompositeElementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPrimitiveElementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cHostedInterfaceDefinitionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		////SubComponentBody: 
		////	SubComponentCompositeBody | SubComponentPrimitiveBody
		////;
		////
		////SubComponentCompositeBody:
		////	anonymous ?= 'composite'	// true but the existence of this body in the SubComponentDefinition rule
		////								// implies an anonymous component anyway
		////	'{'
		////		elements += (SubComponentDefinition | ProvidedInterfaceDefinition | RequiredInterfaceDefinition | BindingDefinition)*
		////	'}'
		////;
		////
		////SubComponentPrimitiveBody:
		////	anonymous?='primitive'		// true but the existence of this body in the SubComponentDefinition rule
		////								// implies an anonymous component anyway
		////	'{'
		////		elements += (ProvidedInterfaceDefinition | RequiredInterfaceDefinition | ImplementationDefinition | AttributeDefinition | DataDefinition)*
		////	'}'
		////;
		//// Check if this rules is in accordance with the original grammar
		//Element:
		//	CompositeElement | PrimitiveElement | HostedInterfaceDefinition;
		@Override public ParserRule getRule() { return rule; }

		//CompositeElement | PrimitiveElement | HostedInterfaceDefinition
		public Alternatives getAlternatives() { return cAlternatives; }

		//CompositeElement
		public RuleCall getCompositeElementParserRuleCall_0() { return cCompositeElementParserRuleCall_0; }

		//PrimitiveElement
		public RuleCall getPrimitiveElementParserRuleCall_1() { return cPrimitiveElementParserRuleCall_1; }

		//HostedInterfaceDefinition
		public RuleCall getHostedInterfaceDefinitionParserRuleCall_2() { return cHostedInterfaceDefinitionParserRuleCall_2; }
	}

	public class CompositeElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompositeElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cHostedInterfaceDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSubComponentDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBindingDefinitionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//CompositeElement:
		//	HostedInterfaceDefinition | SubComponentDefinition | BindingDefinition;
		@Override public ParserRule getRule() { return rule; }

		//HostedInterfaceDefinition | SubComponentDefinition | BindingDefinition
		public Alternatives getAlternatives() { return cAlternatives; }

		//HostedInterfaceDefinition
		public RuleCall getHostedInterfaceDefinitionParserRuleCall_0() { return cHostedInterfaceDefinitionParserRuleCall_0; }

		//SubComponentDefinition
		public RuleCall getSubComponentDefinitionParserRuleCall_1() { return cSubComponentDefinitionParserRuleCall_1; }

		//BindingDefinition
		public RuleCall getBindingDefinitionParserRuleCall_2() { return cBindingDefinitionParserRuleCall_2; }
	}

	public class PrimitiveElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimitiveElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cHostedInterfaceDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cImplementationDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAttributeDefinitionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDataDefinitionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//PrimitiveElement:
		//	HostedInterfaceDefinition | ImplementationDefinition | AttributeDefinition | DataDefinition;
		@Override public ParserRule getRule() { return rule; }

		//HostedInterfaceDefinition | ImplementationDefinition | AttributeDefinition | DataDefinition
		public Alternatives getAlternatives() { return cAlternatives; }

		//HostedInterfaceDefinition
		public RuleCall getHostedInterfaceDefinitionParserRuleCall_0() { return cHostedInterfaceDefinitionParserRuleCall_0; }

		//ImplementationDefinition
		public RuleCall getImplementationDefinitionParserRuleCall_1() { return cImplementationDefinitionParserRuleCall_1; }

		//AttributeDefinition
		public RuleCall getAttributeDefinitionParserRuleCall_2() { return cAttributeDefinitionParserRuleCall_2; }

		//DataDefinition
		public RuleCall getDataDefinitionParserRuleCall_3() { return cDataDefinitionParserRuleCall_3; }
	}

	public class BindingDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BindingDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsListAnnotationsListParserRuleCall_0_0 = (RuleCall)cAnnotationsListAssignment_0.eContents().get(0);
		private final Keyword cBindsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cSourceParentAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final CrossReference cSourceParentSubComponentDefinitionCrossReference_2_0_0 = (CrossReference)cSourceParentAssignment_2_0.eContents().get(0);
		private final RuleCall cSourceParentSubComponentDefinitionIDTerminalRuleCall_2_0_0_1 = (RuleCall)cSourceParentSubComponentDefinitionCrossReference_2_0_0.eContents().get(1);
		private final Assignment cIsSrcParentThisAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final Keyword cIsSrcParentThisThisKeyword_2_1_0 = (Keyword)cIsSrcParentThisAssignment_2_1.eContents().get(0);
		private final Keyword cFullStopKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSourceInterfaceAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cSourceInterfaceHostedInterfaceDefinitionCrossReference_4_0 = (CrossReference)cSourceInterfaceAssignment_4.eContents().get(0);
		private final RuleCall cSourceInterfaceHostedInterfaceDefinitionIDTerminalRuleCall_4_0_1 = (RuleCall)cSourceInterfaceHostedInterfaceDefinitionCrossReference_4_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftSquareBracketKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cSourceIndexAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cSourceIndexINTTerminalRuleCall_5_1_0 = (RuleCall)cSourceIndexAssignment_5_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Keyword cToKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Assignment cTargetParentAssignment_7_0 = (Assignment)cAlternatives_7.eContents().get(0);
		private final CrossReference cTargetParentSubComponentDefinitionCrossReference_7_0_0 = (CrossReference)cTargetParentAssignment_7_0.eContents().get(0);
		private final RuleCall cTargetParentSubComponentDefinitionIDTerminalRuleCall_7_0_0_1 = (RuleCall)cTargetParentSubComponentDefinitionCrossReference_7_0_0.eContents().get(1);
		private final Assignment cIsTgtParentThisAssignment_7_1 = (Assignment)cAlternatives_7.eContents().get(1);
		private final Keyword cIsTgtParentThisThisKeyword_7_1_0 = (Keyword)cIsTgtParentThisAssignment_7_1.eContents().get(0);
		private final Keyword cFullStopKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cTargetInterfaceAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final CrossReference cTargetInterfaceHostedInterfaceDefinitionCrossReference_9_0 = (CrossReference)cTargetInterfaceAssignment_9.eContents().get(0);
		private final RuleCall cTargetInterfaceHostedInterfaceDefinitionIDTerminalRuleCall_9_0_1 = (RuleCall)cTargetInterfaceHostedInterfaceDefinitionCrossReference_9_0.eContents().get(1);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cLeftSquareBracketKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cTargetIndexAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cTargetIndexINTTerminalRuleCall_10_1_0 = (RuleCall)cTargetIndexAssignment_10_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_10_2 = (Keyword)cGroup_10.eContents().get(2);
		private final Keyword cSemicolonKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//// The correct auto-completion scoping for Bindings is implemented in org.ow2.mindEd.adl.textual.scoping.FractalScopeProvider
		//// This could be assimilated to filtering elements from the references pool to provide only pertinent ones.
		//BindingDefinition:
		//	annotationsList=AnnotationsList? "binds" (sourceParent=[SubComponentDefinition] | isSrcParentThis?="this") "."
		//	sourceInterface=[HostedInterfaceDefinition] ("[" sourceIndex=INT "]")? "to" (targetParent=[SubComponentDefinition] |
		//	isTgtParentThis?="this") "." targetInterface=[HostedInterfaceDefinition] ("[" targetIndex=INT "]")? ";";
		@Override public ParserRule getRule() { return rule; }

		//annotationsList=AnnotationsList? "binds" (sourceParent=[SubComponentDefinition] | isSrcParentThis?="this") "."
		//sourceInterface=[HostedInterfaceDefinition] ("[" sourceIndex=INT "]")? "to" (targetParent=[SubComponentDefinition] |
		//isTgtParentThis?="this") "." targetInterface=[HostedInterfaceDefinition] ("[" targetIndex=INT "]")? ";"
		public Group getGroup() { return cGroup; }

		//annotationsList=AnnotationsList?
		public Assignment getAnnotationsListAssignment_0() { return cAnnotationsListAssignment_0; }

		//AnnotationsList
		public RuleCall getAnnotationsListAnnotationsListParserRuleCall_0_0() { return cAnnotationsListAnnotationsListParserRuleCall_0_0; }

		//"binds"
		public Keyword getBindsKeyword_1() { return cBindsKeyword_1; }

		//sourceParent=[SubComponentDefinition] | isSrcParentThis?="this"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//sourceParent=[SubComponentDefinition]
		public Assignment getSourceParentAssignment_2_0() { return cSourceParentAssignment_2_0; }

		//[SubComponentDefinition]
		public CrossReference getSourceParentSubComponentDefinitionCrossReference_2_0_0() { return cSourceParentSubComponentDefinitionCrossReference_2_0_0; }

		//ID
		public RuleCall getSourceParentSubComponentDefinitionIDTerminalRuleCall_2_0_0_1() { return cSourceParentSubComponentDefinitionIDTerminalRuleCall_2_0_0_1; }

		//isSrcParentThis?="this"
		public Assignment getIsSrcParentThisAssignment_2_1() { return cIsSrcParentThisAssignment_2_1; }

		//"this"
		public Keyword getIsSrcParentThisThisKeyword_2_1_0() { return cIsSrcParentThisThisKeyword_2_1_0; }

		//"."
		public Keyword getFullStopKeyword_3() { return cFullStopKeyword_3; }

		//sourceInterface=[HostedInterfaceDefinition]
		public Assignment getSourceInterfaceAssignment_4() { return cSourceInterfaceAssignment_4; }

		//[HostedInterfaceDefinition]
		public CrossReference getSourceInterfaceHostedInterfaceDefinitionCrossReference_4_0() { return cSourceInterfaceHostedInterfaceDefinitionCrossReference_4_0; }

		//ID
		public RuleCall getSourceInterfaceHostedInterfaceDefinitionIDTerminalRuleCall_4_0_1() { return cSourceInterfaceHostedInterfaceDefinitionIDTerminalRuleCall_4_0_1; }

		//("[" sourceIndex=INT "]")?
		public Group getGroup_5() { return cGroup_5; }

		//"["
		public Keyword getLeftSquareBracketKeyword_5_0() { return cLeftSquareBracketKeyword_5_0; }

		//sourceIndex=INT
		public Assignment getSourceIndexAssignment_5_1() { return cSourceIndexAssignment_5_1; }

		//INT
		public RuleCall getSourceIndexINTTerminalRuleCall_5_1_0() { return cSourceIndexINTTerminalRuleCall_5_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_5_2() { return cRightSquareBracketKeyword_5_2; }

		//"to"
		public Keyword getToKeyword_6() { return cToKeyword_6; }

		//targetParent=[SubComponentDefinition] | isTgtParentThis?="this"
		public Alternatives getAlternatives_7() { return cAlternatives_7; }

		//targetParent=[SubComponentDefinition]
		public Assignment getTargetParentAssignment_7_0() { return cTargetParentAssignment_7_0; }

		//[SubComponentDefinition]
		public CrossReference getTargetParentSubComponentDefinitionCrossReference_7_0_0() { return cTargetParentSubComponentDefinitionCrossReference_7_0_0; }

		//ID
		public RuleCall getTargetParentSubComponentDefinitionIDTerminalRuleCall_7_0_0_1() { return cTargetParentSubComponentDefinitionIDTerminalRuleCall_7_0_0_1; }

		//isTgtParentThis?="this"
		public Assignment getIsTgtParentThisAssignment_7_1() { return cIsTgtParentThisAssignment_7_1; }

		//"this"
		public Keyword getIsTgtParentThisThisKeyword_7_1_0() { return cIsTgtParentThisThisKeyword_7_1_0; }

		//"."
		public Keyword getFullStopKeyword_8() { return cFullStopKeyword_8; }

		//targetInterface=[HostedInterfaceDefinition]
		public Assignment getTargetInterfaceAssignment_9() { return cTargetInterfaceAssignment_9; }

		//[HostedInterfaceDefinition]
		public CrossReference getTargetInterfaceHostedInterfaceDefinitionCrossReference_9_0() { return cTargetInterfaceHostedInterfaceDefinitionCrossReference_9_0; }

		//ID
		public RuleCall getTargetInterfaceHostedInterfaceDefinitionIDTerminalRuleCall_9_0_1() { return cTargetInterfaceHostedInterfaceDefinitionIDTerminalRuleCall_9_0_1; }

		//("[" targetIndex=INT "]")?
		public Group getGroup_10() { return cGroup_10; }

		//"["
		public Keyword getLeftSquareBracketKeyword_10_0() { return cLeftSquareBracketKeyword_10_0; }

		//targetIndex=INT
		public Assignment getTargetIndexAssignment_10_1() { return cTargetIndexAssignment_10_1; }

		//INT
		public RuleCall getTargetIndexINTTerminalRuleCall_10_1_0() { return cTargetIndexINTTerminalRuleCall_10_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_10_2() { return cRightSquareBracketKeyword_10_2; }

		//";"
		public Keyword getSemicolonKeyword_11() { return cSemicolonKeyword_11; }
	}

	public class FormalArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FormalArgument");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//FormalArgument:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class FormalArgumentsListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FormalArgumentsList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFormalArgumentsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFormalArgumentsFormalArgumentParserRuleCall_1_0 = (RuleCall)cFormalArgumentsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cFormalArgumentsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cFormalArgumentsFormalArgumentParserRuleCall_2_1_0 = (RuleCall)cFormalArgumentsAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FormalArgumentsList:
		//	"(" formalArguments+=FormalArgument ("," formalArguments+=FormalArgument)* ")";
		@Override public ParserRule getRule() { return rule; }

		//"(" formalArguments+=FormalArgument ("," formalArguments+=FormalArgument)* ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//formalArguments+=FormalArgument
		public Assignment getFormalArgumentsAssignment_1() { return cFormalArgumentsAssignment_1; }

		//FormalArgument
		public RuleCall getFormalArgumentsFormalArgumentParserRuleCall_1_0() { return cFormalArgumentsFormalArgumentParserRuleCall_1_0; }

		//("," formalArguments+=FormalArgument)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//formalArguments+=FormalArgument
		public Assignment getFormalArgumentsAssignment_2_1() { return cFormalArgumentsAssignment_2_1; }

		//FormalArgument
		public RuleCall getFormalArgumentsFormalArgumentParserRuleCall_2_1_0() { return cFormalArgumentsFormalArgumentParserRuleCall_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class TemplateSpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TemplateSpecifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cConformstoKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeReferenceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeReferenceTypeDefinitionCrossReference_2_0 = (CrossReference)cTypeReferenceAssignment_2.eContents().get(0);
		private final RuleCall cTypeReferenceTypeDefinitionQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cTypeReferenceTypeDefinitionCrossReference_2_0.eContents().get(1);
		
		//// Using "id=ID" instead of "name=ID" allows us for the TemplateSpecifiers not to be indexed by default and we'll add them where needed by hand
		//TemplateSpecifier:
		//	name=ID "conformsto" typeReference=[TypeDefinition|QualifiedName];
		@Override public ParserRule getRule() { return rule; }

		//name=ID "conformsto" typeReference=[TypeDefinition|QualifiedName]
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"conformsto"
		public Keyword getConformstoKeyword_1() { return cConformstoKeyword_1; }

		//typeReference=[TypeDefinition|QualifiedName]
		public Assignment getTypeReferenceAssignment_2() { return cTypeReferenceAssignment_2; }

		//[TypeDefinition|QualifiedName]
		public CrossReference getTypeReferenceTypeDefinitionCrossReference_2_0() { return cTypeReferenceTypeDefinitionCrossReference_2_0; }

		//QualifiedName
		public RuleCall getTypeReferenceTypeDefinitionQualifiedNameParserRuleCall_2_0_1() { return cTypeReferenceTypeDefinitionQualifiedNameParserRuleCall_2_0_1; }
	}

	public class AttributeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cNameIntKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cStringKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cInt8_tKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cUint8_tKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cInt16_tKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cUint16_tKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cInt32_tKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cUint32_tKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cInt64_tKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cUint64_tKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cIntptr_tKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cUintptr_tKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		
		////TemplateSpecifiersList :
		////	'<' (templateSpecifiers+=TemplateSpecifier (',' templateSpecifiers+=TemplateSpecifier)*) '>';
		//AttributeType:
		//	name="int" | "string" | "int8_t" | "uint8_t" | "int16_t" | "uint16_t" | "int32_t" | "uint32_t" | "int64_t" |
		//	"uint64_t" | "intptr_t" | "uintptr_t";
		@Override public ParserRule getRule() { return rule; }

		//name="int" | "string" | "int8_t" | "uint8_t" | "int16_t" | "uint16_t" | "int32_t" | "uint32_t" | "int64_t" | "uint64_t"
		//| "intptr_t" | "uintptr_t"
		public Alternatives getAlternatives() { return cAlternatives; }

		//name="int"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"int"
		public Keyword getNameIntKeyword_0_0() { return cNameIntKeyword_0_0; }

		//"string"
		public Keyword getStringKeyword_1() { return cStringKeyword_1; }

		//"int8_t"
		public Keyword getInt8_tKeyword_2() { return cInt8_tKeyword_2; }

		//"uint8_t"
		public Keyword getUint8_tKeyword_3() { return cUint8_tKeyword_3; }

		//"int16_t"
		public Keyword getInt16_tKeyword_4() { return cInt16_tKeyword_4; }

		//"uint16_t"
		public Keyword getUint16_tKeyword_5() { return cUint16_tKeyword_5; }

		//"int32_t"
		public Keyword getInt32_tKeyword_6() { return cInt32_tKeyword_6; }

		//"uint32_t"
		public Keyword getUint32_tKeyword_7() { return cUint32_tKeyword_7; }

		//"int64_t"
		public Keyword getInt64_tKeyword_8() { return cInt64_tKeyword_8; }

		//"uint64_t"
		public Keyword getUint64_tKeyword_9() { return cUint64_tKeyword_9; }

		//"intptr_t"
		public Keyword getIntptr_tKeyword_10() { return cIntptr_tKeyword_10; }

		//"uintptr_t"
		public Keyword getUintptr_tKeyword_11() { return cUintptr_tKeyword_11; }
	}

	public class SignedINTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "signedINT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//signedINT:
		//	("+" | "-")? INT;
		@Override public ParserRule getRule() { return rule; }

		//("+" | "-")? INT
		public Group getGroup() { return cGroup; }

		//("+" | "-")?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"+"
		public Keyword getPlusSignKeyword_0_0() { return cPlusSignKeyword_0_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_0_1() { return cHyphenMinusKeyword_0_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}

	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSignedINTParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cHEXADECIMAL_TYPETerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSTRINGTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final Keyword cNullKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//Value:
		//	ID | signedINT | HEXADECIMAL_TYPE | STRING | "null";
		@Override public ParserRule getRule() { return rule; }

		//ID | signedINT | HEXADECIMAL_TYPE | STRING | "null"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//signedINT
		public RuleCall getSignedINTParserRuleCall_1() { return cSignedINTParserRuleCall_1; }

		//HEXADECIMAL_TYPE
		public RuleCall getHEXADECIMAL_TYPETerminalRuleCall_2() { return cHEXADECIMAL_TYPETerminalRuleCall_2; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_3() { return cSTRINGTerminalRuleCall_3; }

		//"null"
		public Keyword getNullKeyword_4() { return cNullKeyword_4; }
	}

	public class ValueListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValueList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMemberAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMemberValueParserRuleCall_1_0 = (RuleCall)cMemberAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cMemberAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cMemberValueParserRuleCall_2_1_0 = (RuleCall)cMemberAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ValueList:
		//	"{" member+=Value ("," member+=Value)* "}";
		@Override public ParserRule getRule() { return rule; }

		//"{" member+=Value ("," member+=Value)* "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//member+=Value
		public Assignment getMemberAssignment_1() { return cMemberAssignment_1; }

		//Value
		public RuleCall getMemberValueParserRuleCall_1_0() { return cMemberValueParserRuleCall_1_0; }

		//("," member+=Value)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//member+=Value
		public Assignment getMemberAssignment_2_1() { return cMemberAssignment_2_1; }

		//Value
		public RuleCall getMemberValueParserRuleCall_2_1_0() { return cMemberValueParserRuleCall_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class TemplateReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TemplateReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameTemplateSpecifierParserRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cTypeReferenceAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final CrossReference cTypeReferenceTypeReferenceCrossReference_1_0_0 = (CrossReference)cTypeReferenceAssignment_1_0.eContents().get(0);
		private final RuleCall cTypeReferenceTypeReferenceQualifiedNameParserRuleCall_1_0_0_1 = (RuleCall)cTypeReferenceTypeReferenceCrossReference_1_0_0.eContents().get(1);
		private final Assignment cAnyTypeReferenceAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cAnyTypeReferenceQuestionMarkKeyword_1_1_0 = (Keyword)cAnyTypeReferenceAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLessThanSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTemplatesListAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTemplatesListTemplateReferenceParserRuleCall_2_1_0 = (RuleCall)cTemplatesListAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cTemplatesListAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cTemplatesListTemplateReferenceParserRuleCall_2_2_1_0 = (RuleCall)cTemplatesListAssignment_2_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cArgumentsListAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cArgumentsListArgumentDefinitionParserRuleCall_3_1_0 = (RuleCall)cArgumentsListAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cArgumentsListAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cArgumentsListArgumentDefinitionParserRuleCall_3_2_1_0 = (RuleCall)cArgumentsListAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		//TemplateReference:
		//	(name=TemplateSpecifier "=")? (typeReference=[TypeReference|QualifiedName] | anyTypeReference?="?") // Our reference can itself be templated/parametered
		//	("<" templatesList+=TemplateReference ("," templatesList+=TemplateReference)* ">")? ("("
		//	argumentsList+=ArgumentDefinition ("," argumentsList+=ArgumentDefinition)* ")")?;
		@Override public ParserRule getRule() { return rule; }

		//(name=TemplateSpecifier "=")? (typeReference=[TypeReference|QualifiedName] | anyTypeReference?="?") // Our reference can itself be templated/parametered
		//("<" templatesList+=TemplateReference ("," templatesList+=TemplateReference)* ">")? ("("
		//argumentsList+=ArgumentDefinition ("," argumentsList+=ArgumentDefinition)* ")")?
		public Group getGroup() { return cGroup; }

		//(name=TemplateSpecifier "=")?
		public Group getGroup_0() { return cGroup_0; }

		//name=TemplateSpecifier
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }

		//TemplateSpecifier
		public RuleCall getNameTemplateSpecifierParserRuleCall_0_0_0() { return cNameTemplateSpecifierParserRuleCall_0_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }

		//typeReference=[TypeReference|QualifiedName] | anyTypeReference?="?"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//typeReference=[TypeReference|QualifiedName]
		public Assignment getTypeReferenceAssignment_1_0() { return cTypeReferenceAssignment_1_0; }

		//[TypeReference|QualifiedName]
		public CrossReference getTypeReferenceTypeReferenceCrossReference_1_0_0() { return cTypeReferenceTypeReferenceCrossReference_1_0_0; }

		//QualifiedName
		public RuleCall getTypeReferenceTypeReferenceQualifiedNameParserRuleCall_1_0_0_1() { return cTypeReferenceTypeReferenceQualifiedNameParserRuleCall_1_0_0_1; }

		//anyTypeReference?="?"
		public Assignment getAnyTypeReferenceAssignment_1_1() { return cAnyTypeReferenceAssignment_1_1; }

		//"?"
		public Keyword getAnyTypeReferenceQuestionMarkKeyword_1_1_0() { return cAnyTypeReferenceQuestionMarkKeyword_1_1_0; }

		//("<" templatesList+=TemplateReference ("," templatesList+=TemplateReference)* ">")?
		public Group getGroup_2() { return cGroup_2; }

		//"<"
		public Keyword getLessThanSignKeyword_2_0() { return cLessThanSignKeyword_2_0; }

		//templatesList+=TemplateReference
		public Assignment getTemplatesListAssignment_2_1() { return cTemplatesListAssignment_2_1; }

		//TemplateReference
		public RuleCall getTemplatesListTemplateReferenceParserRuleCall_2_1_0() { return cTemplatesListTemplateReferenceParserRuleCall_2_1_0; }

		//("," templatesList+=TemplateReference)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//templatesList+=TemplateReference
		public Assignment getTemplatesListAssignment_2_2_1() { return cTemplatesListAssignment_2_2_1; }

		//TemplateReference
		public RuleCall getTemplatesListTemplateReferenceParserRuleCall_2_2_1_0() { return cTemplatesListTemplateReferenceParserRuleCall_2_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_2_3() { return cGreaterThanSignKeyword_2_3; }

		//("(" argumentsList+=ArgumentDefinition ("," argumentsList+=ArgumentDefinition)* ")")?
		public Group getGroup_3() { return cGroup_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//argumentsList+=ArgumentDefinition
		public Assignment getArgumentsListAssignment_3_1() { return cArgumentsListAssignment_3_1; }

		//ArgumentDefinition
		public RuleCall getArgumentsListArgumentDefinitionParserRuleCall_3_1_0() { return cArgumentsListArgumentDefinitionParserRuleCall_3_1_0; }

		//("," argumentsList+=ArgumentDefinition)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//argumentsList+=ArgumentDefinition
		public Assignment getArgumentsListAssignment_3_2_1() { return cArgumentsListAssignment_3_2_1; }

		//ArgumentDefinition
		public RuleCall getArgumentsListArgumentDefinitionParserRuleCall_3_2_1_0() { return cArgumentsListArgumentDefinitionParserRuleCall_3_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }
	}

	public class ArgumentDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArgumentDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cArgumentValueAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cArgumentValueValueParserRuleCall_1_0_0 = (RuleCall)cArgumentValueAssignment_1_0.eContents().get(0);
		private final Assignment cArgumentListAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cArgumentListValueListParserRuleCall_1_1_0 = (RuleCall)cArgumentListAssignment_1_1.eContents().get(0);
		
		//ArgumentDefinition:
		//	(name=ID "=")? (argumentValue=Value | argumentList=ValueList);
		@Override public ParserRule getRule() { return rule; }

		//(name=ID "=")? (argumentValue=Value | argumentList=ValueList)
		public Group getGroup() { return cGroup; }

		//(name=ID "=")?
		public Group getGroup_0() { return cGroup_0; }

		//name=ID
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0_0() { return cNameIDTerminalRuleCall_0_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }

		//argumentValue=Value | argumentList=ValueList
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//argumentValue=Value
		public Assignment getArgumentValueAssignment_1_0() { return cArgumentValueAssignment_1_0; }

		//Value
		public RuleCall getArgumentValueValueParserRuleCall_1_0_0() { return cArgumentValueValueParserRuleCall_1_0_0; }

		//argumentList=ValueList
		public Assignment getArgumentListAssignment_1_1() { return cArgumentListAssignment_1_1; }

		//ValueList
		public RuleCall getArgumentListValueListParserRuleCall_1_1_0() { return cArgumentListValueListParserRuleCall_1_1_0; }
	}

	public class AttributeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsListAnnotationsListParserRuleCall_0_0 = (RuleCall)cAnnotationsListAssignment_0.eContents().get(0);
		private final Keyword cAttributeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeFlowTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cEqualsSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValueValueParserRuleCall_4_1_0 = (RuleCall)cValueAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//AttributeDefinition:
		//	annotationsList=AnnotationsList? "attribute" type=FlowType name=ID ("=" value=Value)? ";";
		@Override public ParserRule getRule() { return rule; }

		//annotationsList=AnnotationsList? "attribute" type=FlowType name=ID ("=" value=Value)? ";"
		public Group getGroup() { return cGroup; }

		//annotationsList=AnnotationsList?
		public Assignment getAnnotationsListAssignment_0() { return cAnnotationsListAssignment_0; }

		//AnnotationsList
		public RuleCall getAnnotationsListAnnotationsListParserRuleCall_0_0() { return cAnnotationsListAnnotationsListParserRuleCall_0_0; }

		//"attribute"
		public Keyword getAttributeKeyword_1() { return cAttributeKeyword_1; }

		//type=FlowType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//FlowType
		public RuleCall getTypeFlowTypeParserRuleCall_2_0() { return cTypeFlowTypeParserRuleCall_2_0; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//("=" value=Value)?
		public Group getGroup_4() { return cGroup_4; }

		//"="
		public Keyword getEqualsSignKeyword_4_0() { return cEqualsSignKeyword_4_0; }

		//value=Value
		public Assignment getValueAssignment_4_1() { return cValueAssignment_4_1; }

		//Value
		public RuleCall getValueValueParserRuleCall_4_1_0() { return cValueValueParserRuleCall_4_1_0; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class ImplementationDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImplementationDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsListAnnotationsListParserRuleCall_0_0 = (RuleCall)cAnnotationsListAssignment_0.eContents().get(0);
		private final Keyword cSourceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cCFileAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cCFileFilePathParserRuleCall_2_0_0 = (RuleCall)cCFileAssignment_2_0.eContents().get(0);
		private final Assignment cInlineCcodeAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cInlineCcodeInlineCodeCParserRuleCall_2_1_0 = (RuleCall)cInlineCcodeAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ImplementationDefinition:
		//	annotationsList=AnnotationsList? "source" (cFile=FilePath | inlineCcode=InlineCodeC) ";";
		@Override public ParserRule getRule() { return rule; }

		//annotationsList=AnnotationsList? "source" (cFile=FilePath | inlineCcode=InlineCodeC) ";"
		public Group getGroup() { return cGroup; }

		//annotationsList=AnnotationsList?
		public Assignment getAnnotationsListAssignment_0() { return cAnnotationsListAssignment_0; }

		//AnnotationsList
		public RuleCall getAnnotationsListAnnotationsListParserRuleCall_0_0() { return cAnnotationsListAnnotationsListParserRuleCall_0_0; }

		//"source"
		public Keyword getSourceKeyword_1() { return cSourceKeyword_1; }

		//cFile=FilePath | inlineCcode=InlineCodeC
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//cFile=FilePath
		public Assignment getCFileAssignment_2_0() { return cCFileAssignment_2_0; }

		//FilePath
		public RuleCall getCFileFilePathParserRuleCall_2_0_0() { return cCFileFilePathParserRuleCall_2_0_0; }

		//inlineCcode=InlineCodeC
		public Assignment getInlineCcodeAssignment_2_1() { return cInlineCcodeAssignment_2_1; }

		//InlineCodeC
		public RuleCall getInlineCcodeInlineCodeCParserRuleCall_2_1_0() { return cInlineCcodeInlineCodeCParserRuleCall_2_1_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class DataDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsListAnnotationsListParserRuleCall_0_0 = (RuleCall)cAnnotationsListAssignment_0.eContents().get(0);
		private final Keyword cDataKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cCFileAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cCFileFilePathParserRuleCall_2_0_0 = (RuleCall)cCFileAssignment_2_0.eContents().get(0);
		private final Assignment cInlineCcodeAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cInlineCcodeInlineCodeCParserRuleCall_2_1_0 = (RuleCall)cInlineCcodeAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DataDefinition:
		//	annotationsList=AnnotationsList? "data" (cFile=FilePath | inlineCcode=InlineCodeC) ";";
		@Override public ParserRule getRule() { return rule; }

		//annotationsList=AnnotationsList? "data" (cFile=FilePath | inlineCcode=InlineCodeC) ";"
		public Group getGroup() { return cGroup; }

		//annotationsList=AnnotationsList?
		public Assignment getAnnotationsListAssignment_0() { return cAnnotationsListAssignment_0; }

		//AnnotationsList
		public RuleCall getAnnotationsListAnnotationsListParserRuleCall_0_0() { return cAnnotationsListAnnotationsListParserRuleCall_0_0; }

		//"data"
		public Keyword getDataKeyword_1() { return cDataKeyword_1; }

		//cFile=FilePath | inlineCcode=InlineCodeC
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//cFile=FilePath
		public Assignment getCFileAssignment_2_0() { return cCFileAssignment_2_0; }

		//FilePath
		public RuleCall getCFileFilePathParserRuleCall_2_0_0() { return cCFileFilePathParserRuleCall_2_0_0; }

		//inlineCcode=InlineCodeC
		public Assignment getInlineCcodeAssignment_2_1() { return cInlineCcodeAssignment_2_1; }

		//InlineCodeC
		public RuleCall getInlineCcodeInlineCodeCParserRuleCall_2_1_0() { return cInlineCcodeInlineCodeCParserRuleCall_2_1_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)*;
		@Override public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class InlineCodeCElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InlineCodeC");
		private final Assignment cCodeCAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cCodeCCODE_CTerminalRuleCall_0 = (RuleCall)cCodeCAssignment.eContents().get(0);
		
		//InlineCodeC:
		//	codeC=CODE_C;
		@Override public ParserRule getRule() { return rule; }

		//codeC=CODE_C
		public Assignment getCodeCAssignment() { return cCodeCAssignment; }

		//CODE_C
		public RuleCall getCodeCCODE_CTerminalRuleCall_0() { return cCodeCCODE_CTerminalRuleCall_0; }
	}

	public class FilePathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FilePath");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFilePathAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSLTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cSLTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cFullStopFullStopKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cSLTerminalRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final RuleCall cSLTerminalRuleCall_5_0 = (RuleCall)cGroup_5.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cFullStopKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_6_1 = (RuleCall)cGroup_6.eContents().get(1);
		
		//FilePath:
		//	{FilePath} name=SL? ("." SL)? (".." SL)* ID (SL ID)* ("." ID)?;
		@Override public ParserRule getRule() { return rule; }

		//{FilePath} name=SL? ("." SL)? (".." SL)* ID (SL ID)* ("." ID)?
		public Group getGroup() { return cGroup; }

		//{FilePath}
		public Action getFilePathAction_0() { return cFilePathAction_0; }

		//name=SL?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//SL
		public RuleCall getNameSLTerminalRuleCall_1_0() { return cNameSLTerminalRuleCall_1_0; }

		//("." SL)?
		public Group getGroup_2() { return cGroup_2; }

		//"."
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }

		//SL
		public RuleCall getSLTerminalRuleCall_2_1() { return cSLTerminalRuleCall_2_1; }

		//(".." SL)*
		public Group getGroup_3() { return cGroup_3; }

		//".."
		public Keyword getFullStopFullStopKeyword_3_0() { return cFullStopFullStopKeyword_3_0; }

		//SL
		public RuleCall getSLTerminalRuleCall_3_1() { return cSLTerminalRuleCall_3_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_4() { return cIDTerminalRuleCall_4; }

		//(SL ID)*
		public Group getGroup_5() { return cGroup_5; }

		//SL
		public RuleCall getSLTerminalRuleCall_5_0() { return cSLTerminalRuleCall_5_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_5_1() { return cIDTerminalRuleCall_5_1; }

		//("." ID)?
		public Group getGroup_6() { return cGroup_6; }

		//"."
		public Keyword getFullStopKeyword_6_0() { return cFullStopKeyword_6_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_6_1() { return cIDTerminalRuleCall_6_1; }
	}

	public class FileNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FileName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//FileName:
		//	ID ("." ID)?;
		@Override public ParserRule getRule() { return rule; }

		//ID ("." ID)?
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)?
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class AnnotationsListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnnotationsList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		
		//AnnotationsList:
		//	annotations+=Annotation annotations+=Annotation*;
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation annotations+=Annotation*
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_0() { return cAnnotationsAnnotationParserRuleCall_1_0; }
	}

	public class AnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Annotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cNameAlternatives_1_0 = (Alternatives)cNameAssignment_1.eContents().get(0);
		private final Keyword cNameOverrideKeyword_1_0_0 = (Keyword)cNameAlternatives_1_0.eContents().get(0);
		private final Keyword cNameSingletonKeyword_1_0_1 = (Keyword)cNameAlternatives_1_0.eContents().get(1);
		private final Keyword cNameLDFlagsKeyword_1_0_2 = (Keyword)cNameAlternatives_1_0.eContents().get(2);
		private final Keyword cNameCFlagsKeyword_1_0_3 = (Keyword)cNameAlternatives_1_0.eContents().get(3);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0_4 = (RuleCall)cNameAlternatives_1_0.eContents().get(4);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAnnotationElementsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAnnotationElementsAnnotationElementParserRuleCall_2_1_0 = (RuleCall)cAnnotationElementsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cAnnotationElementsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cAnnotationElementsAnnotationElementParserRuleCall_2_2_1_0 = (RuleCall)cAnnotationElementsAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//Annotation:
		//	"@" name=("Override" | "Singleton" | "LDFlags" | "CFlags" | QualifiedName) ("(" annotationElements+=AnnotationElement
		//	("," annotationElements+=AnnotationElement)* ")")?;
		@Override public ParserRule getRule() { return rule; }

		//"@" name=("Override" | "Singleton" | "LDFlags" | "CFlags" | QualifiedName) ("(" annotationElements+=AnnotationElement
		//("," annotationElements+=AnnotationElement)* ")")?
		public Group getGroup() { return cGroup; }

		//"@"
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }

		//name=("Override" | "Singleton" | "LDFlags" | "CFlags" | QualifiedName)
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//"Override" | "Singleton" | "LDFlags" | "CFlags" | QualifiedName
		public Alternatives getNameAlternatives_1_0() { return cNameAlternatives_1_0; }

		//"Override"
		public Keyword getNameOverrideKeyword_1_0_0() { return cNameOverrideKeyword_1_0_0; }

		//"Singleton"
		public Keyword getNameSingletonKeyword_1_0_1() { return cNameSingletonKeyword_1_0_1; }

		//"LDFlags"
		public Keyword getNameLDFlagsKeyword_1_0_2() { return cNameLDFlagsKeyword_1_0_2; }

		//"CFlags"
		public Keyword getNameCFlagsKeyword_1_0_3() { return cNameCFlagsKeyword_1_0_3; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0_4() { return cNameQualifiedNameParserRuleCall_1_0_4; }

		//("(" annotationElements+=AnnotationElement ("," annotationElements+=AnnotationElement)* ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//annotationElements+=AnnotationElement
		public Assignment getAnnotationElementsAssignment_2_1() { return cAnnotationElementsAssignment_2_1; }

		//AnnotationElement
		public RuleCall getAnnotationElementsAnnotationElementParserRuleCall_2_1_0() { return cAnnotationElementsAnnotationElementParserRuleCall_2_1_0; }

		//("," annotationElements+=AnnotationElement)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//annotationElements+=AnnotationElement
		public Assignment getAnnotationElementsAssignment_2_2_1() { return cAnnotationElementsAssignment_2_2_1; }

		//AnnotationElement
		public RuleCall getAnnotationElementsAnnotationElementParserRuleCall_2_2_1_0() { return cAnnotationElementsAnnotationElementParserRuleCall_2_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
	}

	public class AnnotationElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnnotationElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cElementValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementValueElementValueParserRuleCall_1_0 = (RuleCall)cElementValueAssignment_1.eContents().get(0);
		
		//// Pre-defined annotations + allow other names
		////AnnotationType:
		////	'Override' | 'Singleton' | 'LDFlags' | 'CFlags' | QualifiedName;
		//AnnotationElement:
		//	(name=ID "=")? elementValue=ElementValue;
		@Override public ParserRule getRule() { return rule; }

		//(name=ID "=")? elementValue=ElementValue
		public Group getGroup() { return cGroup; }

		//(name=ID "=")?
		public Group getGroup_0() { return cGroup_0; }

		//name=ID
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0_0() { return cNameIDTerminalRuleCall_0_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }

		//elementValue=ElementValue
		public Assignment getElementValueAssignment_1() { return cElementValueAssignment_1; }

		//ElementValue
		public RuleCall getElementValueElementValueParserRuleCall_1_0() { return cElementValueElementValueParserRuleCall_1_0; }
	}

	public class ElementValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ElementValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConstantValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAnnotationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cElementValueArrayInitializerParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ElementValue:
		//	ConstantValue | Annotation | ElementValueArrayInitializer;
		@Override public ParserRule getRule() { return rule; }

		//ConstantValue | Annotation | ElementValueArrayInitializer
		public Alternatives getAlternatives() { return cAlternatives; }

		//ConstantValue
		public RuleCall getConstantValueParserRuleCall_0() { return cConstantValueParserRuleCall_0; }

		//Annotation
		public RuleCall getAnnotationParserRuleCall_1() { return cAnnotationParserRuleCall_1; }

		//ElementValueArrayInitializer
		public RuleCall getElementValueArrayInitializerParserRuleCall_2() { return cElementValueArrayInitializerParserRuleCall_2; }
	}

	public class ElementValueArrayInitializerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ElementValueArrayInitializer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValuesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValuesElementValueParserRuleCall_1_0 = (RuleCall)cValuesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValuesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValuesElementValueParserRuleCall_2_1_0 = (RuleCall)cValuesAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ElementValueArrayInitializer:
		//	"{" values+=ElementValue ("," values+=ElementValue)* "}";
		@Override public ParserRule getRule() { return rule; }

		//"{" values+=ElementValue ("," values+=ElementValue)* "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//values+=ElementValue
		public Assignment getValuesAssignment_1() { return cValuesAssignment_1; }

		//ElementValue
		public RuleCall getValuesElementValueParserRuleCall_1_0() { return cValuesElementValueParserRuleCall_1_0; }

		//("," values+=ElementValue)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//values+=ElementValue
		public Assignment getValuesAssignment_2_1() { return cValuesAssignment_2_1; }

		//ElementValue
		public RuleCall getValuesElementValueParserRuleCall_2_1_0() { return cValuesElementValueParserRuleCall_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class ConstantValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstantValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueConstantFormatParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//ConstantValue:
		//	value=ConstantFormat;
		@Override public ParserRule getRule() { return rule; }

		//value=ConstantFormat
		public Assignment getValueAssignment() { return cValueAssignment; }

		//ConstantFormat
		public RuleCall getValueConstantFormatParserRuleCall_0() { return cValueConstantFormatParserRuleCall_0; }
	}

	public class ConstantFormatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstantFormat");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ConstantFormat:
		//	INT | STRING | ID;
		@Override public ParserRule getRule() { return rule; }

		//INT | STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_2() { return cIDTerminalRuleCall_2; }
	}
	
	
	private final AdlFileElements pAdlFile;
	private final ArchitectureDefinitionElements pArchitectureDefinition;
	private final ImportDefinitionElements pImportDefinition;
	private final QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private final CompositeDefinitionElements pCompositeDefinition;
	private final PrimitiveDefinitionElements pPrimitiveDefinition;
	private final TypeDefinitionElements pTypeDefinition;
	private final CompositeSuperTypeElements pCompositeSuperType;
	private final PrimitiveSuperTypeElements pPrimitiveSuperType;
	private final CompositeSuperTypeDefinitionElements pCompositeSuperTypeDefinition;
	private final PrimitiveSuperTypeDefinitionElements pPrimitiveSuperTypeDefinition;
	private final HostedInterfaceDefinitionElements pHostedInterfaceDefinition;
	private final ProvidedInterfaceDefinitionElements pProvidedInterfaceDefinition;
	private final RequiredInterfaceDefinitionElements pRequiredInterfaceDefinition;
	private final OutputFlowInterfaceDefinitionElements pOutputFlowInterfaceDefinition;
	private final InputFlowInterfaceDefinitionElements pInputFlowInterfaceDefinition;
	private final FlowTypeElements pFlowType;
	private final IDTTypeElements pIDTType;
	private final TypeReferenceElements pTypeReference;
	private final SubComponentDefinitionElements pSubComponentDefinition;
	private final ElementElements pElement;
	private final CompositeElementElements pCompositeElement;
	private final PrimitiveElementElements pPrimitiveElement;
	private final BindingDefinitionElements pBindingDefinition;
	private final FormalArgumentElements pFormalArgument;
	private final FormalArgumentsListElements pFormalArgumentsList;
	private final TemplateSpecifierElements pTemplateSpecifier;
	private final AttributeTypeElements pAttributeType;
	private final SignedINTElements pSignedINT;
	private final TerminalRule tHEXADECIMAL_TYPE;
	private final ValueElements pValue;
	private final ValueListElements pValueList;
	private final TemplateReferenceElements pTemplateReference;
	private final ArgumentDefinitionElements pArgumentDefinition;
	private final AttributeDefinitionElements pAttributeDefinition;
	private final ImplementationDefinitionElements pImplementationDefinition;
	private final DataDefinitionElements pDataDefinition;
	private final QualifiedNameElements pQualifiedName;
	private final InlineCodeCElements pInlineCodeC;
	private final FilePathElements pFilePath;
	private final FileNameElements pFileName;
	private final AnnotationsListElements pAnnotationsList;
	private final AnnotationElements pAnnotation;
	private final AnnotationElementElements pAnnotationElement;
	private final ElementValueElements pElementValue;
	private final ElementValueArrayInitializerElements pElementValueArrayInitializer;
	private final ConstantValueElements pConstantValue;
	private final ConstantFormatElements pConstantFormat;
	private final TerminalRule tCODE_C;
	private final TerminalRule tDOUBLE_LEFT_CURLY_BRACKETS;
	private final TerminalRule tDOUBLE_RIGHT_CURLY_BRACKETS;
	private final TerminalRule tSL;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public AdlGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pAdlFile = new AdlFileElements();
		this.pArchitectureDefinition = new ArchitectureDefinitionElements();
		this.pImportDefinition = new ImportDefinitionElements();
		this.pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements();
		this.pCompositeDefinition = new CompositeDefinitionElements();
		this.pPrimitiveDefinition = new PrimitiveDefinitionElements();
		this.pTypeDefinition = new TypeDefinitionElements();
		this.pCompositeSuperType = new CompositeSuperTypeElements();
		this.pPrimitiveSuperType = new PrimitiveSuperTypeElements();
		this.pCompositeSuperTypeDefinition = new CompositeSuperTypeDefinitionElements();
		this.pPrimitiveSuperTypeDefinition = new PrimitiveSuperTypeDefinitionElements();
		this.pHostedInterfaceDefinition = new HostedInterfaceDefinitionElements();
		this.pProvidedInterfaceDefinition = new ProvidedInterfaceDefinitionElements();
		this.pRequiredInterfaceDefinition = new RequiredInterfaceDefinitionElements();
		this.pOutputFlowInterfaceDefinition = new OutputFlowInterfaceDefinitionElements();
		this.pInputFlowInterfaceDefinition = new InputFlowInterfaceDefinitionElements();
		this.pFlowType = new FlowTypeElements();
		this.pIDTType = new IDTTypeElements();
		this.pTypeReference = new TypeReferenceElements();
		this.pSubComponentDefinition = new SubComponentDefinitionElements();
		this.pElement = new ElementElements();
		this.pCompositeElement = new CompositeElementElements();
		this.pPrimitiveElement = new PrimitiveElementElements();
		this.pBindingDefinition = new BindingDefinitionElements();
		this.pFormalArgument = new FormalArgumentElements();
		this.pFormalArgumentsList = new FormalArgumentsListElements();
		this.pTemplateSpecifier = new TemplateSpecifierElements();
		this.pAttributeType = new AttributeTypeElements();
		this.pSignedINT = new SignedINTElements();
		this.tHEXADECIMAL_TYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "HEXADECIMAL_TYPE");
		this.pValue = new ValueElements();
		this.pValueList = new ValueListElements();
		this.pTemplateReference = new TemplateReferenceElements();
		this.pArgumentDefinition = new ArgumentDefinitionElements();
		this.pAttributeDefinition = new AttributeDefinitionElements();
		this.pImplementationDefinition = new ImplementationDefinitionElements();
		this.pDataDefinition = new DataDefinitionElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pInlineCodeC = new InlineCodeCElements();
		this.pFilePath = new FilePathElements();
		this.pFileName = new FileNameElements();
		this.pAnnotationsList = new AnnotationsListElements();
		this.pAnnotation = new AnnotationElements();
		this.pAnnotationElement = new AnnotationElementElements();
		this.pElementValue = new ElementValueElements();
		this.pElementValueArrayInitializer = new ElementValueArrayInitializerElements();
		this.pConstantValue = new ConstantValueElements();
		this.pConstantFormat = new ConstantFormatElements();
		this.tCODE_C = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CODE_C");
		this.tDOUBLE_LEFT_CURLY_BRACKETS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DOUBLE_LEFT_CURLY_BRACKETS");
		this.tDOUBLE_RIGHT_CURLY_BRACKETS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DOUBLE_RIGHT_CURLY_BRACKETS");
		this.tSL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.ow2.mindEd.Adl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//AdlFile:
	//	imports+=ImportDefinition* / *
	//	 * Any ArchitectureDefinition can be annotated
	//	 * The following line used to be defined in each of the kinds of ArchitectureDefinition
	//	 * (allowing to use the getAnnotationsList method of the according feature in EMF on each type)
	//	 * but led to ambiguities in the grammar, leading to breaking Xtext's model and autocompletion,
	//	 * mostly on provided and required interfaces.
	//	 * / annotationsList=AnnotationsList? architectureDefinition=ArchitectureDefinition;
	public AdlFileElements getAdlFileAccess() {
		return pAdlFile;
	}
	
	public ParserRule getAdlFileRule() {
		return getAdlFileAccess().getRule();
	}

	/// *
	// * SSZ Note: Mind package scoping is handled thanks to the
	// * org.ow2.mindEd.adl.textual.scoping.FractalImportedNamespaceAwareLocalScopeProvider
	// * to be able to manage implicit declaration during the component declaration.
	// * / ArchitectureDefinition:
	//	CompositeDefinition | PrimitiveDefinition | TypeDefinition;
	public ArchitectureDefinitionElements getArchitectureDefinitionAccess() {
		return pArchitectureDefinition;
	}
	
	public ParserRule getArchitectureDefinitionRule() {
		return getArchitectureDefinitionAccess().getRule();
	}

	//ImportDefinition:
	//	annotationsList=AnnotationsList? "import" importedNamespace=QualifiedNameWithWildcard ";";
	public ImportDefinitionElements getImportDefinitionAccess() {
		return pImportDefinition;
	}
	
	public ParserRule getImportDefinitionRule() {
		return getImportDefinitionAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName ".*"?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return pQualifiedNameWithWildcard;
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//CompositeDefinition:
	//	{CompositeDefinition} "composite" name=QualifiedName? // support anonymous definitions
	//	("<" (templateSpecifiers+=TemplateSpecifier ("," templateSpecifiers+=TemplateSpecifier)*) ">")? // <ID conformsto TypeDefinition, ID2 conformsto TypeDef2, ...>
	//	compositeFormalArgumentsList=FormalArgumentsList? // (arg1, arg2, ...)
	//	("extends" superTypes+=CompositeSuperType ("," superTypes+=CompositeSuperType)*)? "{"
	//	elements+=(ProvidedInterfaceDefinition | RequiredInterfaceDefinition | SubComponentDefinition | BindingDefinition |
	//	OutputFlowInterfaceDefinition | InputFlowInterfaceDefinition)* "}";
	public CompositeDefinitionElements getCompositeDefinitionAccess() {
		return pCompositeDefinition;
	}
	
	public ParserRule getCompositeDefinitionRule() {
		return getCompositeDefinitionAccess().getRule();
	}

	//PrimitiveDefinition:
	//	{PrimitiveDefinition} abstract?="abstract"? "primitive" name=QualifiedName? // support anonymous definitions
	//	compositeFormalArgumentsList=FormalArgumentsList? ("extends" superTypes+=PrimitiveSuperType (","
	//	superTypes+=PrimitiveSuperType)*)? "{" elements+=(ProvidedInterfaceDefinition | RequiredInterfaceDefinition |
	//	ImplementationDefinition | AttributeDefinition | DataDefinition | OutputFlowInterfaceDefinition |
	//	InputFlowInterfaceDefinition)* "}";
	public PrimitiveDefinitionElements getPrimitiveDefinitionAccess() {
		return pPrimitiveDefinition;
	}
	
	public ParserRule getPrimitiveDefinitionRule() {
		return getPrimitiveDefinitionAccess().getRule();
	}

	//TypeDefinition:
	//	"type" name=QualifiedName ("extends" superTypes+=[TypeDefinition|QualifiedName] (","
	//	superTypes+=[TypeDefinition|QualifiedName])*)? "{" elements+=(ProvidedInterfaceDefinition |
	//	RequiredInterfaceDefinition | OutputFlowInterfaceDefinition | InputFlowInterfaceDefinition)* "}";
	public TypeDefinitionElements getTypeDefinitionAccess() {
		return pTypeDefinition;
	}
	
	public ParserRule getTypeDefinitionRule() {
		return getTypeDefinitionAccess().getRule();
	}

	//CompositeSuperType:
	//	targetArchDef=[CompositeSuperTypeDefinition|QualifiedName] ("<" templatesList+=TemplateReference (","
	//	templatesList+=TemplateReference)* ">")? ("(" argumentsList+=ArgumentDefinition (","
	//	argumentsList+=ArgumentDefinition)* ")")?;
	public CompositeSuperTypeElements getCompositeSuperTypeAccess() {
		return pCompositeSuperType;
	}
	
	public ParserRule getCompositeSuperTypeRule() {
		return getCompositeSuperTypeAccess().getRule();
	}

	//PrimitiveSuperType:
	//	targetArchDef=[PrimitiveSuperTypeDefinition|QualifiedName] ("(" argumentsList+=ArgumentDefinition (","
	//	argumentsList+=ArgumentDefinition)* ")")?;
	public PrimitiveSuperTypeElements getPrimitiveSuperTypeAccess() {
		return pPrimitiveSuperType;
	}
	
	public ParserRule getPrimitiveSuperTypeRule() {
		return getPrimitiveSuperTypeAccess().getRule();
	}

	//CompositeSuperTypeDefinition:
	//	CompositeDefinition | TypeDefinition;
	public CompositeSuperTypeDefinitionElements getCompositeSuperTypeDefinitionAccess() {
		return pCompositeSuperTypeDefinition;
	}
	
	public ParserRule getCompositeSuperTypeDefinitionRule() {
		return getCompositeSuperTypeDefinitionAccess().getRule();
	}

	//PrimitiveSuperTypeDefinition:
	//	PrimitiveDefinition | TypeDefinition;
	public PrimitiveSuperTypeDefinitionElements getPrimitiveSuperTypeDefinitionAccess() {
		return pPrimitiveSuperTypeDefinition;
	}
	
	public ParserRule getPrimitiveSuperTypeDefinitionRule() {
		return getPrimitiveSuperTypeDefinitionAccess().getRule();
	}

	//HostedInterfaceDefinition:
	//	ProvidedInterfaceDefinition | RequiredInterfaceDefinition | OutputFlowInterfaceDefinition |
	//	InputFlowInterfaceDefinition;
	public HostedInterfaceDefinitionElements getHostedInterfaceDefinitionAccess() {
		return pHostedInterfaceDefinition;
	}
	
	public ParserRule getHostedInterfaceDefinitionRule() {
		return getHostedInterfaceDefinitionAccess().getRule();
	}

	//// Renamed as HostedInterfaceDefinition to resolve name clash with fractalItf::InterfaceDefinition
	//// Another way to solve the problem is to use prefixes ?
	//ProvidedInterfaceDefinition:
	//	annotationsList=AnnotationsList? role="provides" signature=[Itf::InterfaceDefinition|QualifiedName] "as" name=ID
	//	(collection?="[" collectionsize=INT? "]")? ";";
	public ProvidedInterfaceDefinitionElements getProvidedInterfaceDefinitionAccess() {
		return pProvidedInterfaceDefinition;
	}
	
	public ParserRule getProvidedInterfaceDefinitionRule() {
		return getProvidedInterfaceDefinitionAccess().getRule();
	}

	//RequiredInterfaceDefinition:
	//	annotationsList=AnnotationsList? role="requires" optional?="optional"?
	//	signature=[Itf::InterfaceDefinition|QualifiedName] "as" name=ID (collection?="[" collectionsize=INT? "]")? ";";
	public RequiredInterfaceDefinitionElements getRequiredInterfaceDefinitionAccess() {
		return pRequiredInterfaceDefinition;
	}
	
	public ParserRule getRequiredInterfaceDefinitionRule() {
		return getRequiredInterfaceDefinitionAccess().getRule();
	}

	//OutputFlowInterfaceDefinition:
	//	annotationsList=AnnotationsList? role="output" signature=FlowType "as" name=ID (collection?="[" collectionsize=INT?
	//	"]")? ";";
	public OutputFlowInterfaceDefinitionElements getOutputFlowInterfaceDefinitionAccess() {
		return pOutputFlowInterfaceDefinition;
	}
	
	public ParserRule getOutputFlowInterfaceDefinitionRule() {
		return getOutputFlowInterfaceDefinitionAccess().getRule();
	}

	//InputFlowInterfaceDefinition:
	//	annotationsList=AnnotationsList? role="input" optional?="optional"? signature=FlowType "as" name=ID (collection?="["
	//	collectionsize=INT? "]")? ";";
	public InputFlowInterfaceDefinitionElements getInputFlowInterfaceDefinitionAccess() {
		return pInputFlowInterfaceDefinition;
	}
	
	public ParserRule getInputFlowInterfaceDefinitionRule() {
		return getInputFlowInterfaceDefinitionAccess().getRule();
	}

	//FlowType:
	//	AttributeType | IDTType;
	public FlowTypeElements getFlowTypeAccess() {
		return pFlowType;
	}
	
	public ParserRule getFlowTypeRule() {
		return getFlowTypeAccess().getRule();
	}

	//IDTType:
	//	path=FilePath ":" ("struct" | "enum" | "union")? name=ID;
	public IDTTypeElements getIDTTypeAccess() {
		return pIDTType;
	}
	
	public ParserRule getIDTTypeRule() {
		return getIDTTypeAccess().getRule();
	}

	//TypeReference:
	//	ArchitectureDefinition | TemplateSpecifier;
	public TypeReferenceElements getTypeReferenceAccess() {
		return pTypeReference;
	}
	
	public ParserRule getTypeReferenceRule() {
		return getTypeReferenceAccess().getRule();
	}

	//// Original: can do anything but needs lots of manual scoping/validation
	//SubComponentDefinition:
	//	annotationsList=AnnotationsList? "contains" type=[TypeReference|QualifiedName]? ("<" templatesList+=TemplateReference
	//	("," templatesList+=TemplateReference)* ">")? ("(" argumentsList+=ArgumentDefinition (","
	//	argumentsList+=ArgumentDefinition)* ")")? "as" name=ID bodyAnnotationsList=AnnotationsList? body=(CompositeDefinition
	//	| PrimitiveDefinition)? ";";
	public SubComponentDefinitionElements getSubComponentDefinitionAccess() {
		return pSubComponentDefinition;
	}
	
	public ParserRule getSubComponentDefinitionRule() {
		return getSubComponentDefinitionAccess().getRule();
	}

	////SubComponentBody: 
	////	SubComponentCompositeBody | SubComponentPrimitiveBody
	////;
	////
	////SubComponentCompositeBody:
	////	anonymous ?= 'composite'	// true but the existence of this body in the SubComponentDefinition rule
	////								// implies an anonymous component anyway
	////	'{'
	////		elements += (SubComponentDefinition | ProvidedInterfaceDefinition | RequiredInterfaceDefinition | BindingDefinition)*
	////	'}'
	////;
	////
	////SubComponentPrimitiveBody:
	////	anonymous?='primitive'		// true but the existence of this body in the SubComponentDefinition rule
	////								// implies an anonymous component anyway
	////	'{'
	////		elements += (ProvidedInterfaceDefinition | RequiredInterfaceDefinition | ImplementationDefinition | AttributeDefinition | DataDefinition)*
	////	'}'
	////;
	//// Check if this rules is in accordance with the original grammar
	//Element:
	//	CompositeElement | PrimitiveElement | HostedInterfaceDefinition;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}

	//CompositeElement:
	//	HostedInterfaceDefinition | SubComponentDefinition | BindingDefinition;
	public CompositeElementElements getCompositeElementAccess() {
		return pCompositeElement;
	}
	
	public ParserRule getCompositeElementRule() {
		return getCompositeElementAccess().getRule();
	}

	//PrimitiveElement:
	//	HostedInterfaceDefinition | ImplementationDefinition | AttributeDefinition | DataDefinition;
	public PrimitiveElementElements getPrimitiveElementAccess() {
		return pPrimitiveElement;
	}
	
	public ParserRule getPrimitiveElementRule() {
		return getPrimitiveElementAccess().getRule();
	}

	//// The correct auto-completion scoping for Bindings is implemented in org.ow2.mindEd.adl.textual.scoping.FractalScopeProvider
	//// This could be assimilated to filtering elements from the references pool to provide only pertinent ones.
	//BindingDefinition:
	//	annotationsList=AnnotationsList? "binds" (sourceParent=[SubComponentDefinition] | isSrcParentThis?="this") "."
	//	sourceInterface=[HostedInterfaceDefinition] ("[" sourceIndex=INT "]")? "to" (targetParent=[SubComponentDefinition] |
	//	isTgtParentThis?="this") "." targetInterface=[HostedInterfaceDefinition] ("[" targetIndex=INT "]")? ";";
	public BindingDefinitionElements getBindingDefinitionAccess() {
		return pBindingDefinition;
	}
	
	public ParserRule getBindingDefinitionRule() {
		return getBindingDefinitionAccess().getRule();
	}

	//FormalArgument:
	//	name=ID;
	public FormalArgumentElements getFormalArgumentAccess() {
		return pFormalArgument;
	}
	
	public ParserRule getFormalArgumentRule() {
		return getFormalArgumentAccess().getRule();
	}

	//FormalArgumentsList:
	//	"(" formalArguments+=FormalArgument ("," formalArguments+=FormalArgument)* ")";
	public FormalArgumentsListElements getFormalArgumentsListAccess() {
		return pFormalArgumentsList;
	}
	
	public ParserRule getFormalArgumentsListRule() {
		return getFormalArgumentsListAccess().getRule();
	}

	//// Using "id=ID" instead of "name=ID" allows us for the TemplateSpecifiers not to be indexed by default and we'll add them where needed by hand
	//TemplateSpecifier:
	//	name=ID "conformsto" typeReference=[TypeDefinition|QualifiedName];
	public TemplateSpecifierElements getTemplateSpecifierAccess() {
		return pTemplateSpecifier;
	}
	
	public ParserRule getTemplateSpecifierRule() {
		return getTemplateSpecifierAccess().getRule();
	}

	////TemplateSpecifiersList :
	////	'<' (templateSpecifiers+=TemplateSpecifier (',' templateSpecifiers+=TemplateSpecifier)*) '>';
	//AttributeType:
	//	name="int" | "string" | "int8_t" | "uint8_t" | "int16_t" | "uint16_t" | "int32_t" | "uint32_t" | "int64_t" |
	//	"uint64_t" | "intptr_t" | "uintptr_t";
	public AttributeTypeElements getAttributeTypeAccess() {
		return pAttributeType;
	}
	
	public ParserRule getAttributeTypeRule() {
		return getAttributeTypeAccess().getRule();
	}

	//signedINT:
	//	("+" | "-")? INT;
	public SignedINTElements getSignedINTAccess() {
		return pSignedINT;
	}
	
	public ParserRule getSignedINTRule() {
		return getSignedINTAccess().getRule();
	}

	//terminal HEXADECIMAL_TYPE:
	//	"0x" ("a".."z" | "A".."Z" | "0".."9")+;
	public TerminalRule getHEXADECIMAL_TYPERule() {
		return tHEXADECIMAL_TYPE;
	} 

	//Value:
	//	ID | signedINT | HEXADECIMAL_TYPE | STRING | "null";
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	//ValueList:
	//	"{" member+=Value ("," member+=Value)* "}";
	public ValueListElements getValueListAccess() {
		return pValueList;
	}
	
	public ParserRule getValueListRule() {
		return getValueListAccess().getRule();
	}

	//TemplateReference:
	//	(name=TemplateSpecifier "=")? (typeReference=[TypeReference|QualifiedName] | anyTypeReference?="?") // Our reference can itself be templated/parametered
	//	("<" templatesList+=TemplateReference ("," templatesList+=TemplateReference)* ">")? ("("
	//	argumentsList+=ArgumentDefinition ("," argumentsList+=ArgumentDefinition)* ")")?;
	public TemplateReferenceElements getTemplateReferenceAccess() {
		return pTemplateReference;
	}
	
	public ParserRule getTemplateReferenceRule() {
		return getTemplateReferenceAccess().getRule();
	}

	//ArgumentDefinition:
	//	(name=ID "=")? (argumentValue=Value | argumentList=ValueList);
	public ArgumentDefinitionElements getArgumentDefinitionAccess() {
		return pArgumentDefinition;
	}
	
	public ParserRule getArgumentDefinitionRule() {
		return getArgumentDefinitionAccess().getRule();
	}

	//AttributeDefinition:
	//	annotationsList=AnnotationsList? "attribute" type=FlowType name=ID ("=" value=Value)? ";";
	public AttributeDefinitionElements getAttributeDefinitionAccess() {
		return pAttributeDefinition;
	}
	
	public ParserRule getAttributeDefinitionRule() {
		return getAttributeDefinitionAccess().getRule();
	}

	//ImplementationDefinition:
	//	annotationsList=AnnotationsList? "source" (cFile=FilePath | inlineCcode=InlineCodeC) ";";
	public ImplementationDefinitionElements getImplementationDefinitionAccess() {
		return pImplementationDefinition;
	}
	
	public ParserRule getImplementationDefinitionRule() {
		return getImplementationDefinitionAccess().getRule();
	}

	//DataDefinition:
	//	annotationsList=AnnotationsList? "data" (cFile=FilePath | inlineCcode=InlineCodeC) ";";
	public DataDefinitionElements getDataDefinitionAccess() {
		return pDataDefinition;
	}
	
	public ParserRule getDataDefinitionRule() {
		return getDataDefinitionAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//InlineCodeC:
	//	codeC=CODE_C;
	public InlineCodeCElements getInlineCodeCAccess() {
		return pInlineCodeC;
	}
	
	public ParserRule getInlineCodeCRule() {
		return getInlineCodeCAccess().getRule();
	}

	//FilePath:
	//	{FilePath} name=SL? ("." SL)? (".." SL)* ID (SL ID)* ("." ID)?;
	public FilePathElements getFilePathAccess() {
		return pFilePath;
	}
	
	public ParserRule getFilePathRule() {
		return getFilePathAccess().getRule();
	}

	//FileName:
	//	ID ("." ID)?;
	public FileNameElements getFileNameAccess() {
		return pFileName;
	}
	
	public ParserRule getFileNameRule() {
		return getFileNameAccess().getRule();
	}

	//AnnotationsList:
	//	annotations+=Annotation annotations+=Annotation*;
	public AnnotationsListElements getAnnotationsListAccess() {
		return pAnnotationsList;
	}
	
	public ParserRule getAnnotationsListRule() {
		return getAnnotationsListAccess().getRule();
	}

	//Annotation:
	//	"@" name=("Override" | "Singleton" | "LDFlags" | "CFlags" | QualifiedName) ("(" annotationElements+=AnnotationElement
	//	("," annotationElements+=AnnotationElement)* ")")?;
	public AnnotationElements getAnnotationAccess() {
		return pAnnotation;
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}

	//// Pre-defined annotations + allow other names
	////AnnotationType:
	////	'Override' | 'Singleton' | 'LDFlags' | 'CFlags' | QualifiedName;
	//AnnotationElement:
	//	(name=ID "=")? elementValue=ElementValue;
	public AnnotationElementElements getAnnotationElementAccess() {
		return pAnnotationElement;
	}
	
	public ParserRule getAnnotationElementRule() {
		return getAnnotationElementAccess().getRule();
	}

	//ElementValue:
	//	ConstantValue | Annotation | ElementValueArrayInitializer;
	public ElementValueElements getElementValueAccess() {
		return pElementValue;
	}
	
	public ParserRule getElementValueRule() {
		return getElementValueAccess().getRule();
	}

	//ElementValueArrayInitializer:
	//	"{" values+=ElementValue ("," values+=ElementValue)* "}";
	public ElementValueArrayInitializerElements getElementValueArrayInitializerAccess() {
		return pElementValueArrayInitializer;
	}
	
	public ParserRule getElementValueArrayInitializerRule() {
		return getElementValueArrayInitializerAccess().getRule();
	}

	//ConstantValue:
	//	value=ConstantFormat;
	public ConstantValueElements getConstantValueAccess() {
		return pConstantValue;
	}
	
	public ParserRule getConstantValueRule() {
		return getConstantValueAccess().getRule();
	}

	//ConstantFormat:
	//	INT | STRING | ID;
	public ConstantFormatElements getConstantFormatAccess() {
		return pConstantFormat;
	}
	
	public ParserRule getConstantFormatRule() {
		return getConstantFormatAccess().getRule();
	}

	//terminal CODE_C:
	//	DOUBLE_LEFT_CURLY_BRACKETS->DOUBLE_RIGHT_CURLY_BRACKETS;
	public TerminalRule getCODE_CRule() {
		return tCODE_C;
	} 

	//terminal DOUBLE_LEFT_CURLY_BRACKETS:
	//	"{{";
	public TerminalRule getDOUBLE_LEFT_CURLY_BRACKETSRule() {
		return tDOUBLE_LEFT_CURLY_BRACKETS;
	} 

	//terminal DOUBLE_RIGHT_CURLY_BRACKETS:
	//	"}}";
	public TerminalRule getDOUBLE_RIGHT_CURLY_BRACKETSRule() {
		return tDOUBLE_RIGHT_CURLY_BRACKETS;
	} 

	////enum Role :
	////	provides="provides" | requires="requires";
	//terminal SL:
	//	"/";
	public TerminalRule getSLRule() {
		return tSL;
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
