module org.ow2.fractal.mind.idl.idt.FractalIdt

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var grammarURI = "classpath:/org/ow2/mindEd/idt/editor/textual/FractalIdt.xtext"
var file.extensions = "idt"

var packageName = "org.ow2.mindEd.idt.editor.textual"
var projectName = "${packageName}.model"

var platformProject = "../${projectName}"
var runtimeProject = "../${packageName}"

var generateXtendStub = false
var encoding = "UTF-8"

Workflow {
    bean = StandaloneSetup {
		scanClassPath = true
		platformUri = ".."
		registerGeneratedEPackage = "org.ow2.mindEd.itf.editor.textual.fractalIDL.FractalIDLPackage"
		registerGenModelFile = "platform:/resource/org.ow2.mindEd.itf.editor.textual.model/model/generated/FractalItf.genmodel"
	}
	
	component = DirectoryCleaner {
		directory = "${runtimeProject}/src-gen"
	}
	
	component = DirectoryCleaner {
		directory = "${runtimeProject}.ui/src-gen"
	}
	
	component = Generator {
		pathRtProject = platformProject
		pathUiProject = "${runtimeProject}.ui"
		projectNameRt = projectName
		projectNameUi = "${packageName}.ui"
		encoding = encoding
		
		language = auto-inject {
		
			uri = grammarURI
			fileExtensions = file.extensions
			
			// Java API to access grammar elements (required by several other fragments)
			fragment = grammarAccess.GrammarAccessFragment auto-inject {
				//xmlVersion = "1.1"
			}
			
			// generates Java API for the generated EPackages 
			fragment = ecore.EMFGeneratorFragment auto-inject {
				// old: not sure if new above is ok
				//referencedGenModels = "platform:/resource/org.ow2.mindEd.itf.editor.textual.model/src-gen/org/ow2/mindEd/itf/editor/textual/FractalItf.genmodel"
			}
			
			// the serialization component
			//fragment = parseTreeConstructor.ParseTreeConstructorFragment {}
			
			// a custom ResourceFactory for use with EMF 
			fragment = resourceFactory.ResourceFactoryFragment auto-inject {
				fileExtensions = file.extensions
			}
				
			// the following fragment tries to use the Antlr Generator fragment which can be installed via update manager from http://download.itemis.com/updates/
			// fragment = AntlrDelegatingFragment {}
			
			// the following fragment tries to use the Antlr Generator fragment which can be installed via update manager from http://download.itemis.com/updates/ -->
			fragment = org.eclipse.xtext.generator.parser.antlr.XtextAntlrGeneratorFragment auto-inject {
				options = {
					backtrack = true
					classSplitting = true
				}
			}
			
			/*
			If you don't want to use the Antlr fragment for some reason, remove the antlr fragment and uncomment the packrat parser fragment below.
			fragment = parser.PackratParserFragment {}
			*/
			
			// check-based API for validation
			/*
			fragment = validation.CheckFragment {}
			*/
			 
			// java-based API for validation 
			fragment = validation.JavaValidatorFragment auto-inject {
                composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
                composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
            }
            
			// scoping and exporting API
			/*
			fragment = scoping.ImportURIScopingFragment {}
			fragment = exporting.SimpleNamesFragment {}
			*/
			
			// scoping and exporting API 
			fragment = scoping.ImportNamespacesScopingFragment auto-inject {}
			fragment = exporting.QualifiedNamesFragment auto-inject {}
			fragment = builder.BuilderIntegrationFragment auto-inject {}
			
			// formatter API 
			fragment = formatting.FormatterFragment auto-inject {}

			// labeling API 
			fragment = labeling.LabelProviderFragment auto-inject {}

			// outline API 
			fragment = outline.OutlineTreeProviderFragment auto-inject {}
			fragment = outline.QuickOutlineFragment auto-inject {}

			// content assist API
			fragment = contentAssist.ContentAssistFragment auto-inject {}
			
			// the following fragment tries to use the Antlr based content assist 
			//     fragment which can be downloaded from http://www.itemis.com 
			//     and will be ignored if it's not available. 
			//fragment = DelegatingGeneratorFragment { 
			//	delegate = "de.itemis.xtext.antlr.XtextAntlrUiGeneratorFragment"
			//	message="You are generating without ANTLR. It is highly recommended to download and use the plugin \'de.itemis.xtext.antlr\' \n\t using the update site http:\//download.itemis.com/updates/."
			//}
			
			// quickfix API
			fragment = quickfix.QuickfixProviderFragment auto-inject {}
			
			fragment = org.eclipse.xtext.generator.parser.antlr.XtextAntlrUiGeneratorFragment auto-inject { 
				options = {
					backtrack = true
					classSplitting = true
				}
			}
			
			// generates junit test support classes into Generator#pathTestProject
			fragment = junit.Junit4Fragment auto-inject {}

			// project wizard (optional) 
			/*
			fragment = projectWizard.SimpleProjectWizardFragment {
				generatorProjectName = "${projectName}.generator" 
				modelFileExtension = file.extensions
			}
			*/
			
			// rename refactoring
			fragment = refactoring.RefactorElementNameFragment auto-inject {}
			
			// provides a compare view
			fragment = compare.CompareFragment auto-inject {
				fileExtensions = file.extensions
			}	
		}
	}
}
