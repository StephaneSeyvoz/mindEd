/*
* generated by Xtext
*/
grammar InternalIdt;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@lexer::header {
package org.ow2.mindEd.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.ow2.mindEd.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.ow2.mindEd.services.IdtGrammarAccess;

}

@parser::members {
 
 	private IdtGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(IdtGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleIdtFile
entryRuleIdtFile 
:
{ before(grammarAccess.getIdtFileRule()); }
	 ruleIdtFile
{ after(grammarAccess.getIdtFileRule()); } 
	 EOF 
;

// Rule IdtFile
ruleIdtFile
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIdtFileAccess().getGroup()); }
(rule__IdtFile__Group__0)
{ after(grammarAccess.getIdtFileAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConstantDefinitionBegin
entryRuleConstantDefinitionBegin 
:
{ before(grammarAccess.getConstantDefinitionBeginRule()); }
	 ruleConstantDefinitionBegin
{ after(grammarAccess.getConstantDefinitionBeginRule()); } 
	 EOF 
;

// Rule ConstantDefinitionBegin
ruleConstantDefinitionBegin
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConstantDefinitionBeginAccess().getGroup()); }
(rule__ConstantDefinitionBegin__Group__0)
{ after(grammarAccess.getConstantDefinitionBeginAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConstantDefinitionEnd
entryRuleConstantDefinitionEnd 
:
{ before(grammarAccess.getConstantDefinitionEndRule()); }
	 ruleConstantDefinitionEnd
{ after(grammarAccess.getConstantDefinitionEndRule()); } 
	 EOF 
;

// Rule ConstantDefinitionEnd
ruleConstantDefinitionEnd
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConstantDefinitionEndAccess().getEndifKeyword()); }

	'#endif' 

{ after(grammarAccess.getConstantDefinitionEndAccess().getEndifKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__IdtFile__Alternatives_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdtFileAccess().getConstantAssignment_3_0()); }
(rule__IdtFile__ConstantAssignment_3_0)
{ after(grammarAccess.getIdtFileAccess().getConstantAssignment_3_0()); }
)

    |(
{ before(grammarAccess.getIdtFileAccess().getTypeAssignment_3_1()); }
(rule__IdtFile__TypeAssignment_3_1)
{ after(grammarAccess.getIdtFileAccess().getTypeAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__IdtFile__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IdtFile__Group__0__Impl
	rule__IdtFile__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IdtFile__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdtFileAccess().getBegindefAssignment_0()); }
(rule__IdtFile__BegindefAssignment_0)
{ after(grammarAccess.getIdtFileAccess().getBegindefAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IdtFile__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IdtFile__Group__1__Impl
	rule__IdtFile__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IdtFile__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdtFileAccess().getDefAssignment_1()); }
(rule__IdtFile__DefAssignment_1)
{ after(grammarAccess.getIdtFileAccess().getDefAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IdtFile__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IdtFile__Group__2__Impl
	rule__IdtFile__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IdtFile__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdtFileAccess().getIncludesAssignment_2()); }
(rule__IdtFile__IncludesAssignment_2)*
{ after(grammarAccess.getIdtFileAccess().getIncludesAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IdtFile__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IdtFile__Group__3__Impl
	rule__IdtFile__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IdtFile__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdtFileAccess().getAlternatives_3()); }
(rule__IdtFile__Alternatives_3)*
{ after(grammarAccess.getIdtFileAccess().getAlternatives_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IdtFile__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IdtFile__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IdtFile__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdtFileAccess().getEndDefAssignment_4()); }
(rule__IdtFile__EndDefAssignment_4)
{ after(grammarAccess.getIdtFileAccess().getEndDefAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__ConstantDefinitionBegin__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstantDefinitionBegin__Group__0__Impl
	rule__ConstantDefinitionBegin__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDefinitionBegin__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantDefinitionBeginAccess().getIfndefKeyword_0()); }

	'#ifndef' 

{ after(grammarAccess.getConstantDefinitionBeginAccess().getIfndefKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstantDefinitionBegin__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstantDefinitionBegin__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDefinitionBegin__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantDefinitionBeginAccess().getNameAssignment_1()); }
(rule__ConstantDefinitionBegin__NameAssignment_1)
{ after(grammarAccess.getConstantDefinitionBeginAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__IdtFile__BegindefAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdtFileAccess().getBegindefConstantDefinitionBeginParserRuleCall_0_0()); }
	ruleConstantDefinitionBegin{ after(grammarAccess.getIdtFileAccess().getBegindefConstantDefinitionBeginParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IdtFile__DefAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdtFileAccess().getDefConstantDefinitionCrossReference_1_0()); }
(
{ before(grammarAccess.getIdtFileAccess().getDefConstantDefinitionIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getIdtFileAccess().getDefConstantDefinitionIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getIdtFileAccess().getDefConstantDefinitionCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IdtFile__IncludesAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdtFileAccess().getIncludesIncludeDirectiveCrossReference_2_0()); }
(
{ before(grammarAccess.getIdtFileAccess().getIncludesIncludeDirectiveIDTerminalRuleCall_2_0_1()); }
	RULE_ID{ after(grammarAccess.getIdtFileAccess().getIncludesIncludeDirectiveIDTerminalRuleCall_2_0_1()); }
)
{ after(grammarAccess.getIdtFileAccess().getIncludesIncludeDirectiveCrossReference_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IdtFile__ConstantAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdtFileAccess().getConstantConstantDefinitionCrossReference_3_0_0()); }
(
{ before(grammarAccess.getIdtFileAccess().getConstantConstantDefinitionIDTerminalRuleCall_3_0_0_1()); }
	RULE_ID{ after(grammarAccess.getIdtFileAccess().getConstantConstantDefinitionIDTerminalRuleCall_3_0_0_1()); }
)
{ after(grammarAccess.getIdtFileAccess().getConstantConstantDefinitionCrossReference_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IdtFile__TypeAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdtFileAccess().getTypeTypeDefinitionCrossReference_3_1_0()); }
(
{ before(grammarAccess.getIdtFileAccess().getTypeTypeDefinitionIDTerminalRuleCall_3_1_0_1()); }
	RULE_ID{ after(grammarAccess.getIdtFileAccess().getTypeTypeDefinitionIDTerminalRuleCall_3_1_0_1()); }
)
{ after(grammarAccess.getIdtFileAccess().getTypeTypeDefinitionCrossReference_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IdtFile__EndDefAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdtFileAccess().getEndDefConstantDefinitionEndParserRuleCall_4_0()); }
	ruleConstantDefinitionEnd{ after(grammarAccess.getIdtFileAccess().getEndDefConstantDefinitionEndParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDefinitionBegin__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantDefinitionBeginAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getConstantDefinitionBeginAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


