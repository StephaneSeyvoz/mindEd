/*
* generated by Xtext
*/
grammar InternalIdt;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@lexer::header {
package org.ow2.mindEd.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.ow2.mindEd.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.ow2.mindEd.services.IdtGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 
 	private IdtGrammarAccess grammarAccess;
 	
    public InternalIdtParser(TokenStream input, IdtGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "IdtFile";	
   	}
   	
   	@Override
   	protected IdtGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleIdtFile
entryRuleIdtFile returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIdtFileRule()); }
	 iv_ruleIdtFile=ruleIdtFile 
	 { $current=$iv_ruleIdtFile.current; } 
	 EOF 
;

// Rule IdtFile
ruleIdtFile returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getIdtFileAccess().getBegindefConstantDefinitionBeginParserRuleCall_0_0()); 
	    }
		lv_begindef_0_0=ruleConstantDefinitionBegin		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIdtFileRule());
	        }
       		set(
       			$current, 
       			"begindef",
        		lv_begindef_0_0, 
        		"ConstantDefinitionBegin");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getIdtFileRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getIdtFileAccess().getDefConstantDefinitionCrossReference_1_0()); 
	}

)
)(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getIdtFileRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getIdtFileAccess().getIncludesIncludeDirectiveCrossReference_2_0()); 
	}

)
)*((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getIdtFileRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getIdtFileAccess().getConstantConstantDefinitionCrossReference_3_0_0()); 
	}

)
)
    |(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getIdtFileRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		newLeafNode(otherlv_4, grammarAccess.getIdtFileAccess().getTypeTypeDefinitionCrossReference_3_1_0()); 
	}

)
))*(
(
		{ 
	        newCompositeNode(grammarAccess.getIdtFileAccess().getEndDefConstantDefinitionEndParserRuleCall_4_0()); 
	    }
		lv_endDef_5_0=ruleConstantDefinitionEnd		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIdtFileRule());
	        }
       		set(
       			$current, 
       			"endDef",
        		lv_endDef_5_0, 
        		"ConstantDefinitionEnd");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleConstantDefinitionBegin
entryRuleConstantDefinitionBegin returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantDefinitionBeginRule()); }
	 iv_ruleConstantDefinitionBegin=ruleConstantDefinitionBegin 
	 { $current=$iv_ruleConstantDefinitionBegin.current; } 
	 EOF 
;

// Rule ConstantDefinitionBegin
ruleConstantDefinitionBegin returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='#ifndef' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getConstantDefinitionBeginAccess().getIfndefKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getConstantDefinitionBeginAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstantDefinitionBeginRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleConstantDefinitionEnd
entryRuleConstantDefinitionEnd returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantDefinitionEndRule()); } 
	 iv_ruleConstantDefinitionEnd=ruleConstantDefinitionEnd 
	 { $current=$iv_ruleConstantDefinitionEnd.current.getText(); }  
	 EOF 
;

// Rule ConstantDefinitionEnd
ruleConstantDefinitionEnd returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='#endif' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConstantDefinitionEndAccess().getEndifKeyword()); 
    }

    ;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


