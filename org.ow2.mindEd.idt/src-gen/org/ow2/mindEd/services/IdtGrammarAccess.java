/*
* generated by Xtext
*/
package org.ow2.mindEd.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class IdtGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class IdtFileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IdtFile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBegindefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cBegindefConstantDefinitionBeginParserRuleCall_0_0 = (RuleCall)cBegindefAssignment_0.eContents().get(0);
		private final Assignment cDefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cDefConstantDefinitionCrossReference_1_0 = (CrossReference)cDefAssignment_1.eContents().get(0);
		private final RuleCall cDefConstantDefinitionIDTerminalRuleCall_1_0_1 = (RuleCall)cDefConstantDefinitionCrossReference_1_0.eContents().get(1);
		private final Assignment cIncludesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cIncludesIncludeDirectiveCrossReference_2_0 = (CrossReference)cIncludesAssignment_2.eContents().get(0);
		private final RuleCall cIncludesIncludeDirectiveIDTerminalRuleCall_2_0_1 = (RuleCall)cIncludesIncludeDirectiveCrossReference_2_0.eContents().get(1);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cConstantAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final CrossReference cConstantConstantDefinitionCrossReference_3_0_0 = (CrossReference)cConstantAssignment_3_0.eContents().get(0);
		private final RuleCall cConstantConstantDefinitionIDTerminalRuleCall_3_0_0_1 = (RuleCall)cConstantConstantDefinitionCrossReference_3_0_0.eContents().get(1);
		private final Assignment cTypeAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final CrossReference cTypeTypeDefinitionCrossReference_3_1_0 = (CrossReference)cTypeAssignment_3_1.eContents().get(0);
		private final RuleCall cTypeTypeDefinitionIDTerminalRuleCall_3_1_0_1 = (RuleCall)cTypeTypeDefinitionCrossReference_3_1_0.eContents().get(1);
		private final Assignment cEndDefAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEndDefConstantDefinitionEndParserRuleCall_4_0 = (RuleCall)cEndDefAssignment_4.eContents().get(0);
		
		//IdtFile:
		//	begindef=ConstantDefinitionBegin def=[itf::ConstantDefinition] includes+=[itf::IncludeDirective]*
		//	(constant+=[itf::ConstantDefinition] | type+=[itf::TypeDefinition])* endDef=ConstantDefinitionEnd;
		public ParserRule getRule() { return rule; }

		//begindef=ConstantDefinitionBegin def=[itf::ConstantDefinition] includes+=[itf::IncludeDirective]*
		//(constant+=[itf::ConstantDefinition] | type+=[itf::TypeDefinition])* endDef=ConstantDefinitionEnd
		public Group getGroup() { return cGroup; }

		//begindef=ConstantDefinitionBegin
		public Assignment getBegindefAssignment_0() { return cBegindefAssignment_0; }

		//ConstantDefinitionBegin
		public RuleCall getBegindefConstantDefinitionBeginParserRuleCall_0_0() { return cBegindefConstantDefinitionBeginParserRuleCall_0_0; }

		//def=[itf::ConstantDefinition]
		public Assignment getDefAssignment_1() { return cDefAssignment_1; }

		//[itf::ConstantDefinition]
		public CrossReference getDefConstantDefinitionCrossReference_1_0() { return cDefConstantDefinitionCrossReference_1_0; }

		//ID
		public RuleCall getDefConstantDefinitionIDTerminalRuleCall_1_0_1() { return cDefConstantDefinitionIDTerminalRuleCall_1_0_1; }

		//includes+=[itf::IncludeDirective]*
		public Assignment getIncludesAssignment_2() { return cIncludesAssignment_2; }

		//[itf::IncludeDirective]
		public CrossReference getIncludesIncludeDirectiveCrossReference_2_0() { return cIncludesIncludeDirectiveCrossReference_2_0; }

		//ID
		public RuleCall getIncludesIncludeDirectiveIDTerminalRuleCall_2_0_1() { return cIncludesIncludeDirectiveIDTerminalRuleCall_2_0_1; }

		//(constant+=[itf::ConstantDefinition] | type+=[itf::TypeDefinition])*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//constant+=[itf::ConstantDefinition]
		public Assignment getConstantAssignment_3_0() { return cConstantAssignment_3_0; }

		//[itf::ConstantDefinition]
		public CrossReference getConstantConstantDefinitionCrossReference_3_0_0() { return cConstantConstantDefinitionCrossReference_3_0_0; }

		//ID
		public RuleCall getConstantConstantDefinitionIDTerminalRuleCall_3_0_0_1() { return cConstantConstantDefinitionIDTerminalRuleCall_3_0_0_1; }

		//type+=[itf::TypeDefinition]
		public Assignment getTypeAssignment_3_1() { return cTypeAssignment_3_1; }

		//[itf::TypeDefinition]
		public CrossReference getTypeTypeDefinitionCrossReference_3_1_0() { return cTypeTypeDefinitionCrossReference_3_1_0; }

		//ID
		public RuleCall getTypeTypeDefinitionIDTerminalRuleCall_3_1_0_1() { return cTypeTypeDefinitionIDTerminalRuleCall_3_1_0_1; }

		//endDef=ConstantDefinitionEnd
		public Assignment getEndDefAssignment_4() { return cEndDefAssignment_4; }

		//ConstantDefinitionEnd
		public RuleCall getEndDefConstantDefinitionEndParserRuleCall_4_0() { return cEndDefConstantDefinitionEndParserRuleCall_4_0; }
	}

	public class ConstantDefinitionBeginElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstantDefinitionBegin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfndefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ConstantDefinitionBegin:
		//	"#ifndef" name=ID;
		public ParserRule getRule() { return rule; }

		//"#ifndef" name=ID
		public Group getGroup() { return cGroup; }

		//"#ifndef"
		public Keyword getIfndefKeyword_0() { return cIfndefKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class ConstantDefinitionEndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstantDefinitionEnd");
		private final Keyword cEndifKeyword = (Keyword)rule.eContents().get(1);
		
		//ConstantDefinitionEnd:
		//	"#endif";
		public ParserRule getRule() { return rule; }

		//"#endif"
		public Keyword getEndifKeyword() { return cEndifKeyword; }
	}
	
	
	private final IdtFileElements pIdtFile;
	private final ConstantDefinitionBeginElements pConstantDefinitionBegin;
	private final ConstantDefinitionEndElements pConstantDefinitionEnd;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public IdtGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pIdtFile = new IdtFileElements();
		this.pConstantDefinitionBegin = new ConstantDefinitionBeginElements();
		this.pConstantDefinitionEnd = new ConstantDefinitionEndElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.ow2.mindEd.Idt".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//IdtFile:
	//	begindef=ConstantDefinitionBegin def=[itf::ConstantDefinition] includes+=[itf::IncludeDirective]*
	//	(constant+=[itf::ConstantDefinition] | type+=[itf::TypeDefinition])* endDef=ConstantDefinitionEnd;
	public IdtFileElements getIdtFileAccess() {
		return pIdtFile;
	}
	
	public ParserRule getIdtFileRule() {
		return getIdtFileAccess().getRule();
	}

	//ConstantDefinitionBegin:
	//	"#ifndef" name=ID;
	public ConstantDefinitionBeginElements getConstantDefinitionBeginAccess() {
		return pConstantDefinitionBegin;
	}
	
	public ParserRule getConstantDefinitionBeginRule() {
		return getConstantDefinitionBeginAccess().getRule();
	}

	//ConstantDefinitionEnd:
	//	"#endif";
	public ConstantDefinitionEndElements getConstantDefinitionEndAccess() {
		return pConstantDefinitionEnd;
	}
	
	public ParserRule getConstantDefinitionEndRule() {
		return getConstantDefinitionEndAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
